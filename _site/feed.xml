<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julias Design Apprenticeship Blog</title>
    <description>This blog contains Julia Murrays learnings during her Design Apprenticeship at 8th Light.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Nov 2018 15:26:09 -0600</pubDate>
    <lastBuildDate>Tue, 06 Nov 2018 15:26:09 -0600</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Responsive Layouts</title>
        <description>&lt;div class=&quot;c-blog-post&quot;&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        The main goal when designing for the web, is to keep the user engaged with the content. If not designed well, content
        can be complicated and important peices of information can be skipped over by the user. This is one of the biggest
        challanges of creating a layout as a designer. You want it to simple and easy to consume the content, but break it up
        in a way to keep the user interested and engaged. One of the first steps to designing a layout is to establish a grid
        that elements will fall into within the layout. Below are some basic principles and anatomy of a grid.
      &lt;/p&gt;

      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;Grid Design Principles&lt;/h3&gt;
        &lt;ul class=&quot;c-blog-post__ul&quot;&gt;
          &lt;li class=&quot;c-blog-post__li&quot;&gt;
            &lt;b&gt;Clarity/Order&lt;/b&gt; makes it easier for users to find and navigate through content.
          &lt;/li&gt;
          &lt;li class=&quot;c-blog-post__li&quot;&gt;
            &lt;b&gt;Efficiency&lt;/b&gt; allows designers change their design without having to start all over. When designing a grid structure, various
            elements and layouts are addressed to avoid re-work.
            while building the grid structure.
          &lt;/li&gt;
          &lt;li class=&quot;c-blog-post__li&quot;&gt;
            &lt;b&gt;Economy&lt;/b&gt; makes it easier for multiple designers to work on the same design. An established grid structure is like a building
            plan that lets everyone know where to go depending on the situation.
          &lt;/li&gt;
          &lt;li class=&quot;c-blog-post__li&quot;&gt;
            &lt;b&gt;Consistency/Harmony&lt;/b&gt; allows for different layouts across a site to feel as though they fit within a single design
            sytem.
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;Grid Anatomy&lt;/h3&gt;
          &lt;ul class=&quot;c-blog-post__ul&quot;&gt;
            &lt;li class=&quot;c-blog-post__li&quot;&gt;
              A &lt;b&gt;grid container&lt;/b&gt; contains all elements of a grid.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__li&quot;&gt;
              &lt;b&gt;Grid Lines&lt;/b&gt; are referred to by grid line numbers. They are used when specifing where to place elements within a grid.
              For example, an element can placed at a particular grid line, or between two grid lines.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__li&quot;&gt;
             A &lt;b&gt;grid column&lt;/b&gt; is the space between two adjacent vertical grid lines. The size of a grid column is determined by
             the grid-template-columns property.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__li&quot;&gt;
              &lt;b&gt;Grid rows&lt;/b&gt; are the space between two adjacent horizontal grid lines. It's size is determined by the
              grid-template-rows property. Both grid columns and rows can be referred to as a grid track.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__li&quot;&gt;
              &lt;b&gt;Grid cells&lt;/b&gt; exist between grid columns and rows. Cells are defined as any space inside of four grid
              lines. A single grid cell or collection of multiple cells as a grid area.
            &lt;/li&gt;
          &lt;/ul&gt;
      &lt;/p&gt;

      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;CSS Grids, Flexbox &amp; Media Queries&lt;/h3&gt;
        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          There are two approaches you can take when implementing your design into code, flexbox and css grids. Flexbox is great
          if you don't need to change your design much for different screen sizes. This works great if you're designing things
          that are text heavy and don't have a bunch of different components. So if your design is limited to columns and rows
          with basic line wrapping, Flexbox is the way to go. You can use flexbox with media queries to make your flexbox elements
          responsive.
        &lt;/p&gt;
        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          Because of item simplicity, flexbox is considered one-dimensional while css grids are two-dimensional.
          CSS works great for design that require a variety of columns per row. It's also the way to go for any layout that
          needs to be responsive.
        &lt;/p&gt;
        &lt;h4 class=&quot;c-blog-post__heading&quot;&gt;Flexbox&lt;/h4&gt;

          &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
            The first thing to do here is to nest all the elements within the &lt;code class=&quot;c-blog-post__markup&quot;&gt;
            div class=&quot;flex-container&quot;&lt;/code&gt;. Once you've do that in your css you can define some flexbox properties:
          &lt;/p&gt;
            &lt;code class=&quot;c-blog-post__markup&quot;&gt;
            display: flex;&lt;br&gt;
            flex-wrap: wrap;&lt;br&gt;
            justify-content: center;&lt;br&gt;
            &lt;/code&gt;&lt;br&gt;
            &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
              Although flexbox is normally used for designs that don't need to change much for different device widths,
              I just wanted to see how media queries worked with it, and it turned out pretty good I think.
            &lt;/p&gt;
            &lt;code class=&quot;c-blog-post__markup&quot;&gt;
              @media screen and (min-width: $width-small) {&lt;br&gt;
                background-color: $color-black;&lt;br&gt;
                margin: 1.14% 0;&lt;br&gt;
                width: 22%; }&lt;br&gt;
                &lt;br&gt;
              @media screen and (min-width: $width-large) {&lt;br&gt;
                background-color: $color-purple;&lt;br&gt;
                margin: .44% 0;&lt;br&gt;
                width: 12%; }&lt;br&gt;
            &lt;/code&gt;&lt;br&gt;

            &lt;div class=&quot;flexwrapper&quot;&gt;
                &lt;div class=&quot;flexwrapper__one&quot;&gt;üßõ‚Äç&lt;/div&gt;
                &lt;div class=&quot;flexwrapper__two&quot;&gt;üéÉ&lt;/div&gt;
                &lt;div class=&quot;flexwrapper__three&quot;&gt;ü¶á&lt;/div&gt;
                &lt;div class=&quot;flexwrapper__four&quot;&gt;üßô&lt;/div&gt;
                &lt;div class=&quot;flexwrapper__five&quot;&gt;üîÆ&lt;/div&gt;
                &lt;div class=&quot;flexwrapper__six&quot;&gt;üßü‚Äç&lt;/div&gt;
            &lt;/div&gt;

            &lt;caption class=&quot;c-blog-post__caption&quot;&gt;Above: Responsive design using flexbox&lt;/caption&gt;
            &lt;br&gt;&lt;br&gt;
      &lt;h4 class=&quot;c-blog-post__heading&quot;&gt;CSS Grids&lt;/h4&gt;
        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          I found CSS grids to work much better working within BEM. After nesting elements within
          &lt;code class=&quot;c-blog-post__markup&quot;&gt;div class=&quot;wrapper&quot;&lt;/code&gt; you can define your columns
          in percentages within the stylesheet.&lt;br&gt;
        &lt;/p&gt;
        &lt;code class=&quot;c-blog-post__markup&quot;&gt;
          .wrapper {&lt;br&gt;
          display: grid;&lt;br&gt;
          grid-template-columns: 25% 25% 25% 25%; }&lt;br&gt;
        &lt;/code&gt;

        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          Although I only defined four columns for this excercise, many websites use a base of 12 since
          it can easily be divded by both 3 and 4, and provides more layout flexibility. If I left this as is,
          each emoji by default on here would take up a single cell, from one gridline to the next. CSS grids
          allow us to make up bigger columns out of our 12 columns, so I thought I'd try it out. For example,
          I used the &lt;code class=&quot;c-blog-post__markup&quot;&gt;grid-column-start&lt;/code&gt; and
          &lt;code class=&quot;c-blog-post__markup&quot;&gt;grid-column-end&lt;/code&gt; to define where my emojiis would start and end.
        &lt;/p&gt;

          &lt;code class=&quot;c-blog-post__markup&quot;&gt;
            .wrapper__one {&lt;br&gt;
              background-color: $color-black;&lt;br&gt;
              &lt;br&gt;
              @media screen and (min-width: $width-small) {&lt;br&gt;
                grid-column-end: 5;&lt;br&gt;
                grid-column-start: 1; }&lt;br&gt;
                &lt;br&gt;
              @media screen and (min-width: $width-medium) {&lt;br&gt;
                grid-column-end: 3;&lt;br&gt;
                grid-column-start: 1; }&lt;br&gt;
                &lt;br&gt;
              @media screen and (min-width: $width-large) {&lt;br&gt;
                grid-column-end: 2;&lt;br&gt;
                grid-column-start: 1; }&lt;br&gt;
                }
          &lt;/code&gt;

            &lt;div class=&quot;wrapper&quot;&gt;
              &lt;div class=&quot;wrapper__one&quot;&gt;üßõ‚Äç&lt;/div&gt;
              &lt;div class=&quot;wrapper__two&quot;&gt;üéÉ&lt;/div&gt;
              &lt;div class=&quot;wrapper__three&quot;&gt;ü¶á&lt;/div&gt;
              &lt;div class=&quot;wrapper__four&quot;&gt;üßô&lt;/div&gt;
              &lt;div class=&quot;wrapper__five&quot;&gt;üîÆ&lt;/div&gt;
              &lt;div class=&quot;wrapper__six&quot;&gt;üßü‚Äç&lt;/div&gt;
            &lt;/div&gt;
          &lt;caption class=&quot;c-blog-post__caption&quot;&gt;Above: Responsive design using css grids&lt;/caption&gt;

          &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
            I much prefer this method of creating reponsive layouts because I works within the current BEM methodology,
            and it allows for much more flexibility of grid layouts with your designs.
          &lt;/p&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/10/10/Responsive-Layouts.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/10/10/Responsive-Layouts.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>CSS Architecture</title>
        <description>&lt;div class=&quot;c-blog-post&quot;&gt;

  &lt;div class=&quot;c-blog-post__intro&quot;&gt;
      &lt;h2 class=&quot;c-blog-post__heading&quot;&gt;CSS Architecture&lt;/h2&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        There are a lot of different kinds of CSS architecture frameworks and it's difficult
        to differentiate between some of them. I'll be discussing the following CSS architecture frameworks and
        how they relate to one another. We'll go through a brief overview of each one except BEM, which will be more
        in depth since it is the 8th Light convention.
      &lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;c-blog-post__main&quot;&gt;
      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;SASS/SCSS&lt;/h3&gt;
        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          SASS is a meta language on top of css that describes the stylesheet more structurally and cleanly with reusable code.
          Through a simplified syntax and various features for setting styles, style sheets are much more managable than
          regular CSS. It's a common practice to create SASS based design systems since its so easy to update style sheets since
          the styles are reused and not repeated. These are the various features within SASS:
        &lt;/p&gt;
        &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Variables&lt;/h5&gt;
        &lt;p class=&quot;c-blog-post_paragraph&quot;&gt;
          Variables are a way to create values and reuse them throughout your styles. You can
          define a set style starting with with something easy to remember. For example, in &lt;code&gt;tokens.scss&lt;/code&gt;
          you can define a font size with a variable as &lt;code&gt;$font-size-small: 1em;&lt;/code&gt;. Later in your
          &lt;code&gt;main.scss&lt;/code&gt; you could define &lt;code&gt;p { $font-size-small; }&lt;/code&gt;. If you decide to change that
          font size from &lt;code&gt;1em&lt;/code&gt; to &lt;code&gt;1.125em&lt;/code&gt; you only have to update one line of code in your
          &lt;code&gt;tokens.scss&lt;/code&gt;. SASS will go in and update every instance of &lt;code&gt;$font-size-small&lt;/code&gt; for you.
        &lt;/p&gt;

        &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Mixins&lt;/h5&gt;
        &lt;p class=&quot;c-blog-post_paragraph&quot;&gt;
          Mixins are similar to variables, but they allow you to establish styles in blocks. You can define mixin styles inside
          a separates mixin.scss file with &lt;code&gt;@mixin title-style&lt;/code&gt;. Once you're in your style sheet you can declare it
          you by nesting it in any class.
        &lt;/p&gt;

      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;ITCSS&lt;/h3&gt;
        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          ITCSS stands for Inverted Triangle CSS. Its a CSS structure that allows you to structure files in a way that will
          you work more efficiently with global namespace, cascade and selectors specificity. It's divided into layers that
          start with the most broad and get more specific as you progress.
        &lt;/p&gt;
          &lt;ul class-&quot;c-blog-post__list&quot;&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Settings: Used with preprocessors and contain font, colors definitions, etc.
            &lt;/li&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Tools: Globally used mixins and functions. It‚Äôs important not to output any CSS
              in the first 2 layers.
            &lt;/li&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Generic: reset and/or normalize styles, box-sizing definition, etc. This is the first layer which generates
              actual CSS.
            &lt;/li&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Elements: styling for HTML elements like &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; etc. These come with default styling
              from the browser so we can redefine them here.
            &lt;/li&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Objects: class-based selectors which define undecorated design patterns, for example media object known
              from OOCSS.
            &lt;/li&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Components: This is where the majority of CSS and UI components are stored. It can consist of components
              and objects togther.
            &lt;/li&gt;
            &lt;li class-&quot;c-blog-post__listitem&quot;&gt;
              Utilities: utilities and helper classes with ability to override anything which goes before in the triangle,
              eg. hide helper class
            &lt;/li&gt;
          &lt;/ul&gt;

      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;OOCSS&lt;/h3&gt;
        &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
          The purpose of OOCSS is to encourage code reuse and, ultimately, faster and more efficient stylesheets that are
          easier to add to and maintain. OOCSS is based on two principles:
        &lt;/p&gt;
          &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Principle One: Separation of structure from the skin&lt;/h5&gt;
            &lt;p class =&quot;c-blog-post__paragraph&quot;&gt;
              Web page elements have several visual features or skins that are repeated in different contexts. After being
              converted into class based modules, skins can be applied to any element and have the same basic result.
              By applying a ‚Äúskin‚Äù class to all the elements, you can style multiple elements while using very little code.
            &lt;/p&gt;
          &lt;h5 class =&quot;c-blog-post__subtitle&quot;&gt;Principle Two: Separation of containers and content&lt;/h5&gt;
          &lt;p class =&quot;c-blog-post__paragraph&quot;&gt;
            In order to avoid unnecessary repeating styles, OOCSS takes what is common among different elements and separates
            the commonalities into modules, or objects. The goal here is to ensure that styles are not dependent on any
            containing element. This means they can then be reused anywhere in the document, regardless of structural context.
          &lt;/p&gt;

      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;SMACSS&lt;/h3&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        SMACSS stands for Scalable and Modular Architecture for CSS. It is more style guide than it is a rigid framework.
        The main goal is to identify design patterns and to determine better practices for using them. Again like the other
        frameworks we've gone through, the point here is to re-use code and not repeat it. The are five main categories
        are below:
      &lt;/p&gt;
        &lt;ul class=&quot;c-blog-post__list&quot;&gt;
            &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
              Base consists of single element selectors such as heading sizes, default link styles,
              default font styles, and body backgrounds. It will specify styles for whatever elements are
              indicated on a page.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
              Layouts will divide the page into sections. Examples are navigation, header, footer, sidebar, etc.
              Layouts hold one or more modules together.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
              Modules are reusable, segmented parts of a design. This would be typography, buttons, components, etc.
            &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
                States define how a module or layout behaves. Different states could be what something looks like when
                it is responsive, or how it will change from the homepage to an interior page.
              &lt;/li&gt;
            &lt;li class=&quot;c-blog-post__listitem&quot;&gt;Themes are very like like states, although they are not always used.&lt;/li&gt;
        &lt;/ul&gt;

      &lt;h3 class=&quot;c-blog-post__heading&quot;&gt;BEM&lt;/h3&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        BEM is a component-based approach to web development and stands for block element modifier . The idea behind it is to
        divide the user interface of a design into independent blocks. This makes development easy and fast and works well even
        with a complicated UI. The goal here with other CSS architecture methods is to reuse code, not repeat it.
      &lt;/p&gt;

      &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Block&lt;/h5&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        A block is defined as functionally independent page component that can be reused. Blocks are essentially any HTML element
        that can take a class attribute. A block is a defining term, and not a descriptive one.&lt;br&gt;
        Example: &lt;code&gt;div class=‚Äùnav‚Äù&lt;/code&gt;
      &lt;/p&gt;

      &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Element&lt;/h5&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        An element is nested within a block and can't be used without it. An element is a defining term, not a descriptive one.
        In HTML, the class is structured &lt;code&gt;block-name__element-name&lt;/code&gt;. The element name is separated from the block
        name with a double underscore &lt;code&gt;__&lt;/code&gt;. You can nest multiple elements as long as they are nested inside the block,
        not inside each other.&lt;br&gt;
        Example: &lt;code&gt;div class=‚Äùnav__navitem‚Äù&lt;/code&gt;
      &lt;/p&gt;

      &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Modifiers&lt;/h5&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        Modifiers describe a style of a block and/or element. They are declared in a class following the block and/or elements
        with a double dash &lt;code&gt;--&lt;/code&gt;. Its important to name modifiers in a way to describe what they are doing, not what
        the actual style is. For example its better to name a modifier as &lt;code&gt;alert&lt;/code&gt; and not &lt;code&gt;red&lt;/code&gt;.&lt;br&gt;
        Example: &lt;code&gt;div class=‚Äùnav__navitem--alert‚Äù&lt;/code&gt;
      &lt;/p&gt;

      &lt;h5 class=&quot;c-blog-post__heading&quot;&gt;Nesting Rules&lt;/h5&gt;
      &lt;p class=&quot;c-blog-post__paragraph&quot;&gt;
        BEM is great because of its flexibility with its nesting rules, while still maintaining some guardrails. Below are some
        general rules to keep in mind with nesting:&lt;br&gt;
      &lt;/p&gt;

      &lt;ul class=&quot;c-blog-post__list&quot;&gt;
          &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
            BEM is structered in order of reach from broad to specific. Modifiers are children of elements, and elements are
            children of blocks. Blocks are the highest and most broad level. You could never nest an element in a modifier.
          &lt;/li&gt;
          &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
            Blocks and modifiers are required, but elements are optional. If there is no element, the modifier would be the
            direct child of thier block.
          &lt;/li&gt;
          &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
            You can nest a block within a block
          &lt;/li&gt;
          &lt;li class=&quot;c-blog-post__listitem&quot;&gt;
            You can nest multiple elements or modifiers in a block. If you have two elements, they would be nested within
            that block. Meaning, you cannot nest an element within another element. The same goes for a modifier. In addition,
            you can have an element with two modifiers as long as both modifiers are nested within the element and not within
            eachother.
          &lt;/li&gt;
      &lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/10/09/CSS-Architecture.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/10/09/CSS-Architecture.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Color</title>
        <description>&lt;p&gt;
  Color is a tool used in nature, art, design and everyday life to draw attention to or away from something specific. In nature,
  color is used to attract one being to another for procreation. On the other hand it is also used as camolflage to protect
  prey from their predators. We've taken that cue from nature and applied it to our daily lives. This post outlines some
  basic concepts of color theory and how to apply it to digital interfaces.
&lt;/p&gt;
&lt;h2&gt;Color Basics&lt;/h2&gt;
&lt;p&gt;
  The color wheel is a great way to start understanding basic color principles. Its an illustative tool used for organizing
  and categorizing different groups of color hues. These groups are cagetgorized as follows:
  &lt;ul&gt;
    &lt;li&gt;Primary colors: These are colors at the most basic level. They cannot be created by mixing other colors. primary
        colors are blue red and yellow.&lt;/li&gt;
    &lt;li&gt;Secondary colors: These colors are achieved by mixing two primary colors together. Yellow+Blue=Green, Red+Yellow=Orange
        Blue+Red=Violet.&lt;/li&gt;
    &lt;li&gt;Tertiary colors: These colors are created by combining one primary and one secondary color. Yellow+Green=Green-Yellow,
        Yellow+Orange=Yellow-Orange, Orange+Red=Orange-Red, Red+Violet=Red-Violet, Blue+Voilet=Violet-Blue and
        Green+Blue=Blue-Green&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;h3&gt;Color Theory&lt;/h3&gt;
&lt;p&gt;
  The above are used as a guide for mixing colors, as tertiary colors are a result of mixing primary and secondary colors together.
  If we would like to come up with a color scheme for a design we are working on, we can get into some basic color theory:
  &lt;ul&gt;
    &lt;li&gt;
      Complimetary Colors: Colors located on opposite ends of the color wheel. For example, violet and yellow are complimentary
      colors. This color scheme is often used to draw attenion to a focal point or make a bold statement.&lt;/li&gt;
    &lt;li&gt;
      Warm vs Cool: Warm colors are hues achieved by mixing red, yellow or orange together. Cool colors are created by mixing
      blue, yellow or green together. Warm colors are used to envoke feelings of warmth, coziness or power while cool colors
      create a sense of calmness, growth or lightness.
    &lt;/li&gt;
    &lt;li&gt;
      Analagous: These colors are located next to eachother on the color wheel. Analagous color palettes create a composition
      that is confortable and serene.
    &lt;/li&gt;
    &lt;li&gt;
      Monochromatic: This color scheme is created with one color from the color wheel and adding varying amounts of shades, tones
      or tints to it. Monochromatic colors will give a sense of space or depth to an object. It will also create a more
      melancholoy mood.
      &lt;/li&gt;
    &lt;li&gt;
      Tints, Tones and Shades: Tints are created by adding white to a hue, desaturating it in the process. Shades are when
      you add black to a color, creating a richer and darker version of the orginal color. Tones are a combination of the two,
      where you add black and white to a color. These colors will be more subdued, but are more true to what we see in the
      real world.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;h3&gt;Additive vs. Subtractive Colors&lt;/h3&gt;
&lt;p&gt;
  The difference between additive and subtractive colors is easy to remember as long as you know which medium you are
  working in:
  &lt;ul&gt;
    &lt;li&gt;
      &lt;b&gt;Digital:&lt;/b&gt; Color that appears on a digital screen is created with &lt;b&gt;additive&lt;/b&gt; color processes. This process
      starts with black and ends with white. As more color is incorportated into the mixture, the lighter it will get. When
      working with digital color you'll be working in RGB (red green blue) color profiles.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;b&gt;Physical:&lt;/b&gt; Color that appears on a phsyical surface is created with &lt;b&gt;subtractive&lt;/b&gt; color processes. This
      involves starting with white and progressing to black. As you mix more color into your mixture it becomes darker.
      Subtractive color is used with anything that is printed or painted on a physical surface. When working in this way,
      you'll be using CMYK (cyan magenta yellow black) color profiles.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;h2&gt;Color Theory for UI Design&lt;/h2&gt;
  &lt;p&gt;
    An effective UI design really should do one thing: Help the user to identify the ui they to need to use in order to
    achieve their goal or complete a desired task. A good UI should be clear, intuitive and uncomplicated. This is why
    choosing a color scheme for a UI must be simple above all else. The formula of 60% + 30% + 10% creates a color balance
    that aids in a good user experience and doesnt distract from it. Originally taken from the interior design industry,
    this formula defines balance in the space and allows the eye to move smoothly from one area to another. It's also
    easy to remember and to understand: 60% is the dominant color, 20% is secondary and 10% serves as and accent color.
    Now this doesnt mean you can only have three colors, quiete the contrary. If you need a wider palette, take either
    the dominant, secondary or accent colors and build up some shades and tints from them.
  &lt;/p&gt;
    &lt;h3&gt;Greys before Beauty&lt;/h3&gt;
    &lt;p&gt;
      Before selecting your colors, you need to first create a color heirarchy within your UI. If you go straight into
      selection color combinations arbitarily, the day will be gone before you know it, and you most likely won't
      have anything that you feel solid on. It's best to avoid this situation, so before that we'll start
      by laying out our design in greyscale. This will allow up to pinpoint what we want our focal points to be, and
      then we'll apply color to those focal points.
    &lt;/p&gt;
    &lt;h3&gt;Color Blindness and Accessibility&lt;/h3&gt;
    &lt;p&gt;
      Color can be a powerful tool in UI design, but we need to make sure your design choices don't limit access to
      information to some users. What looks red to someone may infact look like a totally different color to another
      person. There are several different types of color blindness, and effects 1 in 12 men and 1 in 200 women, which
      is no small amount. Color blindness is an incredibly complex subject, but designing for it is pretty simple in
      itself. The Web Content Accessibility Guidelines (WCAG 2.1) requires colors to meet a certain color contrast
      for compliance. This applies to text and background as well as necessary ui elements and background. Starting
      by designing in greyscale helps you give yourself a good idea of what your contrast level should be in terms of
      your color heirarchy. The goal here is to make sure a color of a UI shouldn't keep someone from knowing how
      to use it. For more information, check out my post on
      &lt;a href=&quot;https://juliafmurray.github.io/blog/post/2018/09/26/accessibility.html&quot;&gt;accessibility&lt;/a&gt;.
    &lt;/p&gt;
</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/10/05/Color.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/10/05/Color.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Media Queries with CSS3</title>
        <description>&lt;section&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
  &lt;p&gt;
    Media queries are broken down into media types and features. Types are requires and all features are optional. Media types
    include:
    &lt;/p&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;all&lt;/code&gt; is used for paged content viewed for print preview mode&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;print&lt;/code&gt; allows users to print different versions the site for better readability.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;screen&lt;/code&gt; used to change the style of a website by predefined screen widths&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;speech&lt;/code&gt; is used for screed readers that read the website to users&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;
      There are several media features which can be found
      &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features&quot;&gt;here&lt;/a&gt;
      but some commons one are &lt;code&gt;width&lt;/code&gt;	&lt;code&gt;height&lt;/code&gt; &lt;code&gt;orientation&lt;/code&gt; and &lt;code&gt;aspect-ratio&lt;/code&gt;.
      For the purposes responsive design, the &lt;code&gt;width&lt;/code&gt; feature is most commonly used since it defines various
      viewport and device widths.
    &lt;/p&gt;
  &lt;br&gt;
&lt;h3&gt;Setting the Viewport&lt;/h3&gt;
  &lt;p&gt;
    A viewport is essentially anything that is rendered within a broswer and is visable by the user. The first step is to tell
    the browser to pay attention to the viewport width, to not squeeze the desktop site to any width and to apply the style
    changes you define in your css. You start this within with the head of your html:
    &lt;br&gt;
    &lt;code&gt; &lt; meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; &gt; &lt;/code&gt;
  &lt;/p&gt;
  &lt;br&gt;
&lt;h3&gt;Media Queries&lt;/h3&gt;
  &lt;p&gt;
    Now that the viewport is set, we can now define at what widths we want our design to change. There are some different
    pratices about where to place media queries within css. One is where you put all of your media queries at the very bottom,
    and organize them by width which I think is annoying to have to scroll an bunch to compare the same classes of different
    widths together. The other way to do it, which I much prefer is to have all the media queries for the same class together
    starting from smallest to largest width.
  &lt;/p&gt;
  &lt;br&gt;
    &lt;h4&gt;min-width vs max width&lt;/h4&gt;
    &lt;p&gt;
      As mentioned in &lt; part one &gt; there are two ways of establishing breakpoints for your design, with a &lt;code&gt;mid-width&lt;/code&gt;
      rule or a &lt;code&gt;mid-width&lt;/code&gt;.A lot of times, people taking an existing desktop site will use &lt;code&gt;max-width&lt;/code&gt;
      when creating a media query. Often times when you are making an existing site reposnsive you'll use &lt;code&gt;max-width&lt;/code&gt;
      since you have established code for larger desktop size and you're designing for screen sizes below that. In the
      preferable case where you are writing code from scratch it's better to use &lt;code&gt;min-width&lt;/code&gt; since you're starting
      with the smallest screen size and going up.
    &lt;/p&gt;
    &lt;p&gt;
    Let's say you have two sentances that you want to be bigger in in mobile sizes and be smaller for tablet and desktop
    screens. You also want them to be side by side on tablet and stacked on mobile and change colors between the
    two screen sizes as well. Heres how you would define that in your css:
    &lt;br&gt;
    &lt;br&gt;
      &lt;code&gt;
        @media screen and (min-width: 320px) {&lt;br&gt;
        .ex-one {&lt;br&gt;
        background-color: $color-green;&lt;br&gt;
        font-family: $font-family-heading;&lt;br&gt;
        font-size: $font-size-heading-medium;&lt;br&gt;
        padding-bottom: 15px;&lt;br&gt;
        text-decoration-color: $color-black;&lt;br&gt;
        width: 100%;&lt;br&gt;
          }&lt;br&gt;
        }&lt;br&gt;
        @media screen and (min-width: 768px) {&lt;br&gt;
        .ex-one {&lt;br&gt;
        background-color: $color-alert;&lt;br&gt;
        float: left;&lt;br&gt;
        font-family: $font-family-heading;&lt;br&gt;
        font-size: $font-size-heading-xxxx-small;&lt;br&gt;
        padding-bottom: 15px;&lt;br&gt;
        text-decoration-color: $color-black;&lt;br&gt;
        width: 50%;&lt;br&gt;
          }&lt;br&gt;
          }&lt;br&gt;
        @media screen and (min-width: 320px) {&lt;br&gt;
        .ex-two {&lt;br&gt;
        background-color: $color-alert;&lt;br&gt;
        font-family: $font-family-heading;&lt;br&gt;
        font-size: $font-size-heading-medium;&lt;br&gt;
        padding-bottom: 15px;&lt;br&gt;
        text-decoration-color: $color-black;&lt;br&gt;
        width: 100%;&lt;br&gt;
          }&lt;br&gt;
        }&lt;br&gt;
        &lt;br&gt;
        @media screen and (min-width: 768px) {&lt;br&gt;
        .ex-two {&lt;br&gt;
        background-color: $color-green;&lt;br&gt;
        float: left;&lt;br&gt;
        font-family: $font-family-heading;&lt;br&gt;
        font-size: $font-size-heading-xxxx-small;&lt;br&gt;
        padding-bottom: 15px;&lt;br&gt;
        text-decoration-color: $color-black;&lt;br&gt;
        width: 50%;&lt;br&gt;
          }&lt;br&gt;
        }&lt;br&gt;
      &lt;/code&gt;
    &lt;/p&gt;
    &lt;br&gt;
    &lt;div class=&quot;ex-one&quot;&gt;Example: Resize the browser width to see this media querey in action&lt;/div&gt;
    &lt;div class=&quot;ex-two&quot;&gt;Example: Resize the browser width to see this media querey in action&lt;/div&gt;
    &lt;br&gt;
  &lt;h3&gt;Responsive Units&lt;/h3&gt;
    &lt;p&gt;
      In my &lt; previous post &gt; I go into how the units for your grid and typography need to be flexible now that our canvas
      is no longer fixed. With responsive typography our units go from &lt;code&gt;px&lt;/code&gt; to &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt;.
      The only difference is that &lt;code&gt;rem&lt;/code&gt; unit derives the base font size from the &lt;code&gt;html&lt;/code&gt; class in your css.
      This is a bit cleaner and easier to manage than &lt;code&gt;em&lt;/code&gt; which derives the base font from whatever element it's
      nested in. You can easily understand how things can get out of hand if your class is nested within several elements that
      have multiple font sizes.
    &lt;/p&gt;
    &lt;p&gt;
      Like with typography, when setting up a responsive layout there will be a shift away from &lt;code&gt;px&lt;/code&gt; but this time,
      we'll be changing to &lt;code&gt;%&lt;/code&gt;. We do this because we want to think of our columns and gutters and relative units
      that resize proportionally to the browser width set at 100%.
    &lt;/p&gt;
&lt;/section&gt;
</description>
        <pubDate>Thu, 04 Oct 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/10/04/Media-Queries.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/10/04/Media-Queries.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Mobile 1st Design &amp; Development</title>
        <description>&lt;section&gt;
  &lt;p&gt;
    Mobile first design &amp; devopment is the process of building sites with a focused on the experience for users on mobile
    devices. This is inclusive on process for strategy, design and devlopment. There are many many reasons for working in
    this way. I could list off a bunch of statistics about mobile web browsing surpassing desktop browsing years ago,
    but mobile 1st design is more about market longevity than anything else. People use devices of all different sizes
    any there is little to no chance that will change any time soon. We no longer live in a fixed width world so
    it doesn't make sense to build digital products with that mindset either.
  &lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;Mobile 1st Strategy&lt;/h3&gt;
  &lt;p&gt;
    Before I start on how to design mobile 1st, we need to start with a strategy. Besides the obvious reason why for ourselves
    and stakeholders, why do your users need a mobile site? What are they trying to do? What kind of constraints are they
    under? Driving a car, sun glare, low battery, running late? Proabably all of the above. This is why it is so important to do
    research before your design process. You can do this through quantitive methods like running google analytics or conducting
    surveys as well as qualitive methods like conducting contextual inquiry interviews where you observe users using the website
    in context to their everyday lives.
  &lt;/p&gt;
  &lt;br&gt;
&lt;h3&gt;Design Process&lt;/h3&gt;
  &lt;p&gt;
    Once you have your strategy and user goals defined it's time to start designing. Before you start designing, here are a few
    things to keep in mind:
  &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Design for content, not retrofitting old desktop features&lt;/li&gt;
      &lt;li&gt;Use mobile features to drive the UX strategy for all devices&lt;/li&gt;
      &lt;li&gt;Don't forget about the nuances touch interactions on mobile vs. mouse interactions on desktop&lt;/li&gt;
      &lt;li&gt;Mobile 1st doesnt mean you have to wait to design other device widths until the end. I focus on mobile but design
          all devices concurrently.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Heres a general step by step process as you start planning and ideating your design. This is absolutely not set in stone,
      but this is what works for me:
    &lt;/p&gt;
      &lt;ol&gt;
        &lt;li&gt;Start with sketching out the content in a general layout&lt;/li&gt;
        &lt;li&gt;Based on your sketch, define your layout and grid in columns and gutters&lt;/li&gt;
        &lt;li&gt;Establish a responsive type scale that is structured semantically. Include h1-h6, paragraph, leading and
            line length. Type Scale is one of my favorite ways of setting this up, and it even translates pixels into
            ems and rems. (More on that below)&lt;/li&gt;
        &lt;li&gt;Plan out how all of your components are going to behave, but don‚Äôt be married to anything. You will tweak and
            refine during development.&lt;/li&gt;
      &lt;/ol&gt;
&lt;br&gt;
&lt;h3&gt;Development&lt;/h3&gt;
  &lt;br&gt;
  &lt;h4&gt;Enabling Multiple Viewports&lt;/h4&gt;
  &lt;p&gt;
    Now that you've got your design locked down it's time to translate it into code. One of the first things you need to
    do is tell the browser to pay attention to the viewport width and change what renders based on that. To clarify a
    viewport is visable area in a browser and usually contains a range of widths. Later in your css you can define that a
    tablet viewport is when the browser width is between 960px and 768px. In order to tell the browser to do this, we
    need to add a meta tag in the head of your html, which won't be code that renders in the browser:
    &lt;br&gt;
    &lt;code&gt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial scale=1.0 maximum -scale-1.0, user scalable=0&quot;/&lt;/code&gt;
    &lt;br&gt;
    If you don't include this tag the browser will continue to re-adjust the desktop website on any viewport width.
  &lt;/p&gt;
  &lt;br&gt;
  &lt;h4&gt;Media Queries&lt;/h4&gt;
    &lt;p&gt;
      Media queries are a CSS3 technique that define style changes according to an established set of viewport widths. Using
      the &lt;code&gt;@media&lt;/code&gt; rule to define various breakpoints. Below I'll break down some of the concepts with mobile first
      development. Check out &lt;a href=&quot;link.html&quot;&gt;this&lt;/a&gt; post for more information about media queries with code examples.
    &lt;/p&gt;
    &lt;br&gt;
    &lt;h5&gt;Min-Width vs Max-Width&lt;/h5&gt;
     &lt;p&gt;
       There are two ways of establishing breakpoints for your design, with a &lt;code&gt;mid-width&lt;/code&gt; rule or a &lt;code&gt;mid-width&lt;/code&gt;.
       A lot of times, people taking an existing desktop site will use &lt;code&gt;max-width&lt;/code&gt; when creating a media query.
       &lt;code&gt;max-width&lt;/code&gt; will specify you want to apply styles up to viewports 768px. When creating a site from scratch
       you you can where the mobile 1st mindset applies to &lt;code&gt;min-width&lt;/code&gt;. When used with &lt;code&gt;@media&lt;/code&gt;
       this rule will specify that you want to apply style changes to viewports 768px and above. If you think back to elementry
       math, the less than and more than symbols may be helpful.
       &lt;br&gt;
       &lt;code&gt;min-width&lt;/code&gt; = greater than &gt;
       &lt;br&gt;
       &lt;code&gt;max-width&lt;/code&gt; = less than &lt;
     &lt;/p&gt;
     &lt;br&gt;
  &lt;h4&gt;Using Responsive Units&lt;/h4&gt;
  &lt;p&gt;
    Once you've defined the breakpoints you want your design to change at you'll need to define those style changes, specifically
    in terms of your grid. Up this point as a designer, we've probably been working within fixed units such as pixels. Now that
    we need our design to be flexible, so do our units. We need to now be working within relative units.
  &lt;/p&gt;
  &lt;h4&gt;Typography&lt;/h4&gt;
  &lt;p&gt;
    For typography we'll now be writing our css using &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;. The main difference between the
    two is how the browser determines the base px value that they are attached to. For the &lt;code&gt;rem&lt;/code&gt; the base pixel the
    browser draws from can be found in the &lt;code&gt;html&lt;/code&gt; style. In the case of &lt;code&gt;em&lt;/code&gt; the desired pixel value is
    derived from the parent element that it is nested in. Using &lt;code&gt;em&lt;/code&gt; is often discouraged because it will inherit any
    other font styles of whatever element it is in. That way something with 1.25em in its own element will look different than
    something with a 1.25 that is nested within another element.
  &lt;/p&gt;
  &lt;h4&gt;Grid&lt;/h4&gt;
  &lt;p&gt;
    In fixed width layouts we usually create a table with columns set in pixels. Now that we are moving into a more fluid layout
    we'll be sizing things with percentages, and those percentages are relative to the width of the viewport which is 100%.
    So if you have something that takes up 4 columns side by side we would convert those to perceptances. In this case each column
    would not be 25% as you would think. You still need to consider the relative width of the gutters and margins around each column.
    In this instance, you would want to make each column 21.25% leaving the outside margins and inside gutter to be alotted 5% each.
  &lt;/p&gt;
&lt;/section&gt;
</description>
        <pubDate>Wed, 03 Oct 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/10/03/Mobile-1st-Design-&-Development.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/10/03/Mobile-1st-Design-&-Development.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Git for Humans</title>
        <description>&lt;section&gt;
  &lt;p&gt;
    I‚Äôm only about 2 weeks into my apprenticeship as well as my introduction to Git and Github. So far I'd like to say one thing:
    Git makes me feel really dumb. Going through some of these concepts makes me feel like I am literally re-wiring my
    brain, but some of the wires aren't connecting. One of my first steps of being not dumb at Git has been to read
    &lt;cite&gt;Git for Humans&lt;/cite&gt; by David Demaree. Overall it was a really helpful book, but mostly due to the subject matter,
    it wasn't exactly a page turner. Next I'll go through the general concepts from the book, explain them with brief command
    examples.
  &lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;Version Control&lt;/h3&gt;
  &lt;p&gt;
    Overall, I understand the need for version control software, especially for larger companies with multiple people working
    on different design iterations of the same site or application. As a designer one of my pet peeves is to have a work folder
    with 20 different files with no specificity or naming convention, especially when you find out the file names have nothing
    to do with the actual content in the file.
  &lt;/p&gt;
  &lt;br&gt;
&lt;h3&gt;The Command Line&lt;/h3&gt;
  &lt;p&gt;
    The command line makes me feel really dumb. As a designer, I think in terms of visually moving a thing to a things and
    seeing that thing happen makes me feel like there is some order to this crazy world. The command line turns my brain inside
    out and upside down and leaves me unsure about what reality really is. That being said, I feel like I am 20 times more
    comfortable with the command line than I did my first day.
  &lt;/p&gt;
  &lt;p&gt;
    The command line is essentially a non-graphical way to navigate through directories both locally on your computer and (I think)
    somehow, remotely find other directories other places, like Github. You as a user can type in commands into an program
    called Terminal, those commands will run, and sometimes, you will get a confirmation about the result of those commands.
    If you ever saw the 1995 movie Hackers, you may have a better understanding of what I'm talking about. If only we were
    cool enough to have nicknames like &quot;Zero Cool&quot; or &quot;Crash Override&quot;.
    &lt;/head&gt;
  &lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;Start a New Project or Clone an Existing Project&lt;/h3&gt;
  &lt;p&gt;
    After initializing Github, you'll either need to create a new project or start on an exisitng project. In
    order to start a new project you first need to make a directory for it by sending the command:&lt;br&gt;
    &lt;code&gt;$: mkdir new-project&lt;/code&gt;.&lt;br&gt;
    This will make a new directory with a folder called &quot;new project&quot;. Next we need to change to that directory
    in order to start working in it:&lt;br&gt;
    &lt;code&gt;$: cd new:project&lt;/code&gt;&lt;br&gt;
    The last step in this step is to initiaize the repository&lt;br&gt;
    &lt;code&gt;$: git init&lt;/code&gt;&lt;br&gt;
  &lt;/p&gt;
  &lt;p&gt;
    More often than not, you'll be working on exisiting software that you need to make changes to. This means that
    you'll need to clone off of an existing repo. Cloning means that what gets saved in your local directory is an
    exact replica of the files on the server. You'll start out with the &lt;code&gt;git clone&lt;/code&gt; command which a real
    powerhouse command that does multiple things at once. It will create the new directory, initializes the new
    repository, adds an &lt;code&gt;origin&lt;/code&gt; remote while pulling changes from the it at the same time.
  &lt;/p&gt;
  &lt;br&gt;
&lt;h3&gt;Commiting to a Branch&lt;/h3&gt;
  &lt;p&gt;
    After you have your project set up in your directory, and you've made the changes in your code, you need to commit.
    A commit is essentially a stored version of the project with your changes in it, but separate because it hasnt been
    merged with what is live. This book refers to it as an object, which is a strange and overly vague term that that isn't
    really helpful. So I'll just call it an unmerged version. I'm not quite sure what the process is for 8th Light, but
    I assume as a design crafter I would commit my changes, have a code review and then they would be merged with the master
    branch.
  &lt;/p&gt;
  &lt;p&gt;
    Before you commit, you need to decide on a branch to commit it to. What is a branch exactly? To out it simple a branch
    is merely a label, saying this code is different from what is live and we categorize it by &quot;x&quot; branch. When starting a
    new project, Git creates a default branch and calls it master. In many cases master is what you will see live on the
    site, but not always, it depends on the company and their front end development process.
  &lt;p&gt;
  &lt;p&gt;
    In many cases you'll want to create a new branch. Git has separate commands for creating a new branch and checking
    it our (which moves you to it) but thats annoying. Great thing is theres a combination command that does both things
    at once:&lt;br&gt;
    &lt;code&gt; git checkout -b new-project&lt;/code&gt;. Once this is done you can confirm that you created and in the
    branch that you want by passing:&lt;br&gt;
    &lt;code&gt;$: git branch&lt;/code&gt;
    If everything is working correctly, you should recieve a message with a &lt;code&gt;*&lt;/code&gt; and the branch name you just made.
  &lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;Merging&lt;/h3&gt;
  &lt;p&gt;
    So far you've created or modified a directory, made some changes to it and committed those changes to a branch within
    the repository. After reviewing your code to make sure everything is good, the next step would be to merge it with
    the masterbranch, or whichever branch you've decided the live site is pulling from. The first thing you do would be
    to checkout the master branch with &lt;code&gt;$: git checkout master&lt;/code&gt;. You'll then want to pull changes from the previous
    branch you were working on and merge them with master, so you'll pass along &lt;code&gt;$: git merge new-project&lt;/code&gt;.
  &lt;/p&gt;
  &lt;p&gt;
    There are two kinds of merges, fast forward and merge commits. Fast forwards are great, but only really work when one of the
    two branches you're merging has a new commit (this is usually the non-master one). Here, git moves the head of the master
    commit to the &quot;other&quot; one you just committed to. If you've got changes both in your master and your other branch, the
    best thing to do is a merge commit. With this, Git needs to create a combined snapshot of the changes in both branches
    and figure out what the new merge is going to look like. In order to do this it will find the first common ancestor
    in order to figure out what has changed and what hasn't. As long as both branches don't have changes in the same line,
    Git should be able to merge both branches successfully.
  &lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;Remotes&lt;/h3&gt;
  &lt;p&gt;
    So far, many of the topics I've discussed work perfectly for someone working on a project locally on their compputer.
    One of the most powerful things about Git is that is allows multiple people from multiple locations in the world
    to collaborate on a project. This is where remotes come in. A remote repository is how a single person can access
    a directory that lives somewhere besides that persons local computer. Most of the itme, this is where Github comes
    in. While Git is the version control system, Github is a hosting service for Git repositories. Going back to one of
    the earier terms in this post, a remote is where you would clone your repository onto your local computer and make
    changes that would then be commited and merged into a branch.
  &lt;/p&gt;
  &lt;p&gt;
    Something you may have to do with remotes is make a remote an origin for our project. To do this, you pass along
    &lt;code&gt;
      (master) $: git remote add origin https://new-project.com
    &lt;/code&gt; &lt;br&gt;
    &lt;code&gt;git remote&lt;/code&gt; is a command with several sub-commands. The sub-commands for &lt;code&gt;git remote&lt;/code&gt;
    are &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;rm&lt;/code&gt; among others.
  &lt;/p&gt;
  &lt;p&gt;
    Related to remotes is &lt;code&gt;git fetch&lt;/code&gt; whic allows you to work offline. It'll pull down a copy of every branch
    of a remote and it will allow you to commit changes and merge to a branch without having to be online.
  &lt;/p&gt;
&lt;br&gt;
&lt;h3&gt;History&lt;/h3&gt;
  &lt;p&gt;
    For every commit that's made theres a history of it, which is a really powerful feature. You can even view the commit
    history even if you don't use Github as a hosting service. The first command you'll pass is &lt;code&gt;git log&lt;/code&gt;
    and in response you'll get a list of every commit for a project and will give you the commit id, author, date, and
    what the change was.
  &lt;/p&gt;
  &lt;p&gt;
    Most of the time seeing every commit that ever happened isn't the most useful thing, but Git
    has a solution for that. You can add on a format string, which is just an addition to the &lt;code&gt;git log&lt;/code&gt;
    command. The format string &lt;code&gt;--pretty=oneline&lt;/code&gt; will only show the commit id and commit message in a single line.
    Another helpful command is that you can choose to view your commit history in a range format. For this your
    reference points are two commit references to see what happened between then in a start and end format:&lt;br&gt;
    &lt;code&gt;$: git log --oneline master..new-homepage&lt;/code&gt;&lt;br&gt;
    The &lt;code&gt;..&lt;/code&gt;separates the start and end branch and returns with the history wihtin those ranges for you.
  &lt;/p&gt;
  &lt;p&gt;
    You can also filter your commit history by recency, date range, or by author. You can do this by passing along:&lt;br&gt;
    &lt;code&gt;$: git log --author=Murray --grep=cats --oneline Gemfile&lt;/code&gt;&lt;br&gt;
    This is telling Git that you want to see a commit history for something authored by me, containing the words cats
    and changed the file called Gemfile.
  &lt;/p&gt;
&lt;/section&gt;
</description>
        <pubDate>Thu, 27 Sep 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/09/27/Git-for-Humans.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/09/27/Git-for-Humans.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Web Accessibility</title>
        <description>&lt;header&gt;
  &lt;h2&gt;What is Web Accessibility&lt;/h2&gt;
&lt;/header&gt;

    &lt;p&gt;
      Web accessibility is the practice of building (design and developing) websites and other digital products so that users of
      all abilities can access them. The Web Content Accessibility Guidelines (WCAG) provides a standard on how to do this and
      provides a success criteria of A, AA, and AAA. A success criteria is essentially a measure for the level of complaiance
      a website or application holds itself to.
    &lt;/p&gt;
    &lt;br&gt;
      &lt;h3&gt;Inaccessible websites create barriers for users who are/have:&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
        Blind or low vision
        &lt;/li&gt;
        &lt;li&gt;
        Deaf or Hearing Impaired
        &lt;/li&gt;
        &lt;li&gt;
        Cognitative disabilities
        &lt;/uli&gt;
        &lt;li&gt;
        Limited motor skills
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;br&gt;
    &lt;h3&gt;Why Should We Care?&lt;/h3&gt;
    &lt;p&gt;
      Often times companies brush of accessibility as unnecessary. Remarks such as &quot;Those arent our users&quot; and &quot;We've always
      done it this way&quot; are common rationals for keeping up with the status quo. In a perfect world we should all genuinely
      care about all users, including those with disabilities. Fortunately, there are several benefits to accessibility
      besides that fuzzy feeling you get when you're a decent human being.
    &lt;/p&gt;
    &lt;p&gt;
      To put it simply: accessibilty means good business. For example, if a site uses proper things like image alt attributes,
      title and header tags and html semantic markup, it returns better SEO results. Another factor is that most people
      at some point in their lives experience become disabled, even temporarily. Often times, most people
      will have difficulty viewing screens after lasik eye surgery. Broswer features like high contrast mode allow users to
      view screens with less strain on their eyes. Lastly, designing for accessibility safeguards your client against legal
      ramifications for non-complaince. If your client works in areas of the government, healthcare or airlines they are
      are most likely legally bound to adhere to WCAG. Even if they are outside these industries, they are still vulnerable
      to lawsuits. &lt;a href=&quot;https://www.boia.org/blog/2018s-flood-of-accessibility-lawsuits&quot;&gt;Among others in 2018&lt;/a&gt;, giants like
      Amazon and Nike have come under attack for non-compliance.
      &lt;/table&gt;
    &lt;/p&gt;
    &lt;br&gt;

    &lt;h3&gt;Start by Starting&lt;/h3&gt;
    &lt;p&gt;
      Creating and implementing accessible digital products has 3 contributing parties: design (UX/visual), development and
      business. If you and/or your company is new to web accessibility, it can seem pretty intimidating to start. As a designer,
      your advantage is that you have influence from the very begining on implementing accessibity into your digital product.
      Up next well go through some very easy steps in order to start designing for accessibility and its benefits.
    &lt;/p&gt;

    &lt;h3&gt;1). Make sure your colors meet contrast ratios&lt;/h3&gt;
      &lt;p&gt; One of the first things a designer can to to ensure for accessibility is to make sure their designs meet the
          correct color contrast ratio. The most recent guidelines just came out, 2.1 and with that comes some additional
          requirements from the previous 2.0.
      &lt;/p&gt;
      &lt;h4&gt;2.0: Text and Background Color:&lt;/h4&gt;
      &lt;p&gt;
        Previously, the only thing color contrast applied to was text and background color. Level AA requires a contrast
        ratio of at least 4.5:1 for normal text and 3:1 for large text. Level AAA requires a contrast ratio of at least
        7:1 for normal text and 4.5:1 for large text.
      &lt;/p&gt;
      &lt;h4&gt;2.1: Images and UI Elements:&lt;/h4&gt;
      &lt;p&gt;
        In the case that a graphic is essential for understanding content or functionality on website, the contrast ratio
        of at least 4.5:1 against the surrounding colors. This isnt a hard and fast rule though, as there are some exceptions.
        Any graphic that has a minimum height and width of 3px as well as logo types or anything that is non-essential is excluded.
      &lt;/p&gt;
      &lt;p&gt;UI elements are also required to meet contrast standards in 2.1. Any UI elemenet deemed essential
        to understand content functionality must meet a contrast ratio of 4.5:1 against the surrounding colors. Exceptions for This
        include elements with a minimum of 3px must meet a contrast ratio of 3:1. Disbaled or inactive UI elements are also
        exempt from this guideline.
      &lt;/p&gt;
      &lt;p&gt; Caluculating these contrast ratios seems like a really tedious task, but it's not! There are a lot of great resources out
        there but here are the two main ones I use in my workflow:
        &lt;br&gt;
        &lt;ul&gt;
          &lt;li&gt;
              &lt;a href=&quot;http://contrast-finder.tanaguru.com/&quot;&gt;
                Tanaguru contrast checker
              &lt;/a&gt;
              is one of my favorite web-based tools for this. It not only allows you to choose between contrast ratios, it also
              offers suggestions for similar colors if your combination doesn't meet the ratio you need.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;http://www.getstark.co/&quot;&gt;
              Stark sketch plugin
            &lt;/a&gt;
            is a way to check your contrast ratios right within Sketch. One of the cool things about this one is that
            you can also test your color combinations against the many types of color blindess (yes, there are several types).
          &lt;/li&gt;
        &lt;/ul&gt;



    &lt;h3&gt;2). Don‚Äôt use color alone to communicate&lt;/h3&gt;
    &lt;p&gt;
      While we are on the subject of color blindness, we also need to make sure that color is not an essential communicator
      of content or functionality. This mainly pertains to forms and error states. If an error is communicated to a color
      blind user only by the use of red text, there really is no way for them to know where that error is in the page.
      Many accessible websites will use the &lt;span&gt;&amp;#9888;&lt;/span&gt; warning symbol along with red text to communicate than
      and error has occured.
    &lt;/p&gt;
    &lt;p&gt;
      One of my favorite games is Dots , a silly phone game that releases serotonin in your brain when you connect
      colored dots together. The game does have a great color blind mode where each dot has a shape inside it that corresponds
      to its color. A medium article written by &lt;a href=&quot;https://medium.com/intrepid-s-insights/designing-for-and-with-color-blindness-48392aab3d87&quot;&gt;color blind designer, Aaron Tenbuuren&lt;/a&gt;
      goes into detail about how Dots and other apps design for color blind users successfully.
    &lt;/p&gt;

    &lt;h3&gt;3.) Design focus states for all ui components and allow for keyboard navigation&lt;/h3&gt;
    &lt;p&gt;
    As a someone who doesn't use accessibility features on devices, I definately have a bias towards navigating
    with a mouse or trackpad over a keyboard or other assistive devices. Many different types of users will use
    non-mouse devices including blind users who use screen readers. People with MS or arthritis will use the keyboard
    because using a mouse is often painful and difficult. Power users of complex forms also use keyboard naviagtion
    simply because its a more efficient than clicking into each and every element. Regardless of a users ability or
    behavior, allowing for keyboard navigation requires considering what all the different states of a form element
    will look like. States include disabled, deafult, active and focus. The focus state is especially helpful because
    it communicates to users what part of the website they are currently on. One of my favorite resources for this
    is the &lt;a href=&quot;https://designsystem.digital.gov/components/form-controls/&quot;&gt;U.S. Web Design Standards&lt;/a&gt;,
    which is an open source design system used by all U.S. federal websites.
    &lt;/p&gt;

    &lt;h3&gt;4). Use alt text for non-text components&lt;/h3&gt;
      &lt;p&gt;
        For people that use screen readers to read written conenet also need access to non-written content. This includes
        maps, graphics, photos, animations and video. In order to do this alt tags are added in HTML to include a short
        message of what the non-text content is about. Although this is something done mostly during front end development,
        as designers we not only design the UI, but we also design and shape the content. It's important to craft image
        descriptions to give the same context for both sighted and non sighted users.
        &lt;a href=&quot;https://www.microsoft.com/design/inclusive/&quot;&gt;Microsoft design&lt;/a&gt; has a series of videos
        about the power of inclusive design that has great voice over descriptions of what is happening in the video. These
        not only give context to the videos, but they add value for all users.
      &lt;/p&gt;


    &lt;h3&gt;5). Use proper headings with HTML semantic markup&lt;/h3&gt;
    &lt;p&gt;
      Another practice that makes sure users who with screen readers can easily navigate through a websites content is
      by using proper HTML mark up for headings. Doing this the screen reader reads each header to the user as they
      go through the content on the page from top to bottom. It will tell the user what is a header and what is paragraph
      content. It also allows the user to easily and quickly jump through content, by listing out the headings from h1 to
      h6 so they can be used as a table of contents. Although writing this code is a part of front end development, you need
      to establish the type heirarchy first. An easy way to figure out your type sizes, I reccomend using
      &lt;a href=&quot;https://type-scale.com/&quot;&gt;type scale&lt;/a&gt;&quot;, a web based tools that sets heirarchy based on a different set of
      ratios.
    &lt;/p&gt;
</description>
        <pubDate>Wed, 26 Sep 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/post/2018/09/26/accessibility.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/post/2018/09/26/accessibility.html</guid>
        
        
        <category>blog</category>
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>CSS Positioning</title>
        <description>&lt;header&gt;
  &lt;h1&gt;CSS Positioning&lt;/h1&gt;
&lt;/header&gt;
&lt;br&gt;

    &lt;p&gt;
    The &lt;code&gt;position&lt;/code&gt; property specifies the type of positioning method used for an element. The position
    types are &lt;code&gt;static&lt;/code&gt; &lt;code&gt;relative&lt;/code&gt; &lt;code&gt;fixed&lt;/code&gt; &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;sticky.&lt;/code&gt;&lt;br&gt;
    &lt;/p&gt;
&lt;div class =&quot;positions&quot;&gt;

&lt;div class=&quot;content&quot;&gt;
&lt;h2&gt;Static&lt;/h2&gt;
    &lt;p&gt;
    HTML elements are positioned &lt;code&gt;static&lt;/code&gt; by default. Static positioned elements are not affected by the &lt;code&gt;top&lt;/code&gt;
    &lt;code&gt;bottom&lt;/code&gt; &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; properties. An element with position: &lt;code&gt;static&lt;/code&gt; is
    not positioned in any special way; it is always positioned according to the normal flow of the page:
    &lt;/p&gt;
      &lt;code&gt;
        .static&lt;br&gt;
        {&lt;br&gt;
        width: 100px;&lt;br&gt;
        height: 100px;&lt;br&gt;
        background-color: #ff6a6a;&lt;br&gt;
        float: left;&lt;br&gt;
        &lt;span style=&quot;color:red&quot;&gt;position: static;&lt;/span&gt;&lt;br&gt;
        }&lt;br&gt;
      &lt;/code&gt;

      &lt;div class=&quot;static1&quot;&gt;static&lt;/div&gt;
      &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;
&lt;h2&gt;Relative&lt;/h2&gt;
    &lt;p&gt;
    An element with &lt;code&gt;position: relative;&lt;/code&gt; is positioned relative to its normal position. Setting the &lt;code&gt;top&lt;/code&gt;
    &lt;code&gt;right&lt;/code&gt; &lt;code&gt;bottom&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties of a relatively-positioned element will cause
    it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.
    &lt;/p&gt;

    &lt;code&gt;
    .relative&lt;br&gt;
      {&lt;br&gt;
      width: 100px;&lt;br&gt;
      height: 100px;&lt;br&gt;
      background-color: #ff6a6a;&lt;br&gt;
      float: left;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;position: relative;&lt;/span&gt;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;left: 30px;&lt;/span&gt;&lt;br&gt;
      }&lt;br&gt;
    &lt;/code&gt;

    &lt;div class=&quot;relative1&quot;&gt;relative&lt;/div&gt;
    &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;
&lt;h2&gt;Fixed&lt;/h2&gt;
  &lt;p&gt;
    An element with &lt;code&gt;position: fixed;&lt;/code&gt; is positioned relative to the viewport, which means it always stays in the
    same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
    A fixed element does not leave a gap in the page where it would normally have been located.
  &lt;/p&gt;

  &lt;code&gt;
    .fixed&lt;br&gt;
      {&lt;br&gt;
      width: 100px;&lt;br&gt;
      height: 100px;&lt;br&gt;
      background-color: #ff6a6a;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;position: fixed;&lt;/span&gt;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;bottom: 0;&lt;/span&gt;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;right: 0;&lt;/span&gt;&lt;br&gt;
      }&lt;br&gt;
  &lt;/code&gt;

  &lt;div class=&quot;fixed1&quot;&gt;fixed&lt;/div&gt;
  &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;
&lt;h2&gt;Sticky&lt;/h2&gt;
  &lt;p&gt;
  An element with &lt;code&gt;position: sticky;&lt;/code&gt; is positioned based on the user's scroll position. A sticky element toggles
  between relative and fixed, depending on the scroll position. It is positioned &lt;code&gt;relative&lt;/code&gt; until a given offset
  position is met in the viewport - then it &quot;sticks&quot; in place (like position:fixed).
  &lt;/p&gt;

  &lt;code&gt;
    .sticky&lt;br&gt;
    {&lt;br&gt;
    width: 200px; &lt;br&gt;
    height: 200px;&lt;br&gt;
    background-color: #FFB9B9;&lt;br&gt;
    &lt;span style=&quot;color:red&quot;&gt;position: sticky;&lt;/span&gt;&lt;br&gt;
    &lt;span style=&quot;color:red&quot;&gt;position: -webkit-sticky;&lt;/span&gt;&lt;br&gt;
    &lt;span style=&quot;color:red&quot;&gt;top: 0;&lt;/span&gt;&lt;br&gt;
    }&lt;br&gt;
  &lt;/code&gt;

  &lt;div class=&quot;sticky&quot;&gt;sticky
    &lt;img src= &quot;/images/sticky.svg.png&quot; width=&quot;200&quot; alt=&quot;example of sticky css positioning&quot;&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;
&lt;h2&gt;Absolute&lt;/h2&gt;
  &lt;p&gt;
    An element with &lt;code&gt;position: absolute;&lt;/code&gt; is positioned relative to the nearest positioned ancestor
    (instead of positioned relative to the viewport, like fixed). However; if an absolute positioned element has no
    positioned ancestors, it uses the document body, and moves along with page scrolling.
  &lt;/p&gt;

  &lt;code&gt;
    .absolute1&lt;br&gt;
    {&lt;br&gt;
      width: 100px;&lt;br&gt;
      height: 100px;&lt;br&gt;
      background-color: #ff6a6a;&lt;br&gt;
      float: left;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;position: relative;&lt;/span&gt;&lt;br&gt;
    }&lt;br&gt;
  &lt;/code&gt;

  &lt;code&gt;
    .absolute2&lt;br&gt;
    {&lt;br&gt;
      width: 100px;&lt;br&gt;
      height: 100px;&lt;br&gt;
      background-color: #ff6a6a;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;position: absolute;&lt;/span&gt;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;top: 2300px;&lt;/span&gt;&lt;br&gt;
      &lt;span style=&quot;color:red&quot;&gt;right: 300;&lt;/span&gt;&lt;br&gt;
    }&lt;br&gt;
  &lt;/code&gt;

  &lt;div class=&quot;absolute1&quot;&gt;relative&lt;/div&gt;
  &lt;div class=&quot;absolute2&quot;&gt;absolute&lt;/div&gt;

&lt;/div&gt;

&lt;div class=&quot;content&quot;&gt;
    &lt;h3&gt;Z Index&lt;/h3&gt;
    &lt;p&gt;
    When elements are positioned, they can overlap other elements. The &lt;code&gt;z-index&lt;/code&gt; property specifies the stack order
    of an element (which element should be placed in front of, or behind, the others). An element can have a positive or
    negative stack order.
    &lt;/p&gt;

    &lt;code&gt;
      .zindex&lt;br&gt;
      {&lt;br&gt;
        width: 100px;&lt;br&gt;
        height: 100px;&lt;br&gt;
        background-color: #ff6a6a;&lt;br&gt;
        float: left;&lt;br&gt;
        &lt;span style=&quot;color:red&quot;&gt;position: absolute;&lt;/span&gt;&lt;br&gt;
        &lt;span style=&quot;color:red&quot;&gt;pleft: 50px;&lt;/span&gt;&lt;br&gt;
        &lt;span style=&quot;color:red&quot;&gt;top: 2800px;&lt;/span&gt;&lt;br&gt;
        &lt;span style=&quot;color:red&quot;&gt;z-index: 1;&lt;/span&gt;&lt;br&gt;
      }&lt;br&gt;
    &lt;/code&gt;

  &lt;div class=&quot;zindex1&quot;&gt;z-index&lt;/div&gt;
  &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 25 Sep 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/post/2018/09/25/css-positioning.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/post/2018/09/25/css-positioning.html</guid>
        
        
        <category>blog</category>
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>HTML Elements</title>
        <description>&lt;header&gt;
  &lt;h1&gt;HTML Elements&lt;/h1&gt;
&lt;/header&gt;

&lt;section&gt;
&lt;h3&gt;Metadata Content&lt;/h3&gt;
  &lt;code&gt;base&lt;/code&gt;
    Determines the base url for all links. When a link goes off to an external site this element has to appear before it.&lt;br&gt;
  &lt;code&gt;link&lt;/code&gt;
    Used to connect a document to an external resource such as external stylesheets.&lt;br&gt;
  &lt;code&gt;meta&lt;/code&gt;
    Specifies all the metadata within the html document, like author, description or keywords.
    This information is not visible on the page.&lt;br&gt;
  &lt;code&gt;noscript&lt;/code&gt;
    If there are disabled scripts or issues with browser support &lt;code&gt;noscript&lt;/code&gt; allows for alternate content.
    It can be used in the &lt;code&gt;body&lt;/code&gt; and the &lt;code&gt;head&lt;/code&gt;. If in the &lt;code&gt;head&lt;/code&gt;
    elements are limited to &lt;code&gt;link&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt;.&lt;br&gt;
  &lt;code&gt;script&lt;/code&gt;
    Where scripts instructions are kept or link to external ones. Used to dynamically create block and/or
    inline content&lt;br&gt;
  &lt;code&gt;style&lt;/code&gt;
    Defines style info in the document and specifies how different elements should be styled.&lt;br&gt;
  &lt;code&gt;title&lt;/code&gt;
    title of a document, specified in the &lt;code&gt;head&lt;/code&gt; section in an html document. The content entered
    here appears in the browser toolbar, creates a title when the page is added to favorites and displays a title
    in search engine results. &lt;br&gt;

&lt;h3&gt;Flow Content&lt;/h3&gt;
  &lt;code&gt;a&lt;/code&gt;
    Defines something as a hyperlink; an interactive element that will take the user to another page.&lt;br&gt;
  &lt;code&gt;abbr&lt;/code&gt;
    Defines something as an abbreviation or an acronym&lt;br&gt;
  &lt;code&gt;address&lt;/code&gt;
    Contact info for the owner of a document&lt;br&gt;
  &lt;code&gt;article&lt;/code&gt;
    Defines an article in the document which could be a blog post, news story, comment, etc.&lt;br&gt;
  &lt;code&gt;aside&lt;/code&gt;
    Defines content aside from main content. Aside content should still be related to the main content.&lt;br&gt;
  &lt;code&gt;audio&lt;/code&gt;
    Defines audio content in the document. It accepts .mp3, .wav and .ogg&lt;br&gt;
  &lt;code&gt;b&lt;/code&gt;
    Styles text within the html to be bold.&lt;br&gt;
  &lt;code&gt;bdi&lt;/code&gt;
    Stands for bidirectional isolation. This is to take specific text and change the directionality from the direction of the text around it.&lt;br&gt;
  &lt;code&gt;bdo&lt;/code&gt;
    Overrides the text direction of the entire document.&lt;br&gt;
  &lt;code&gt;blockquote&lt;/code&gt;
    Will define content quoted from another source, and is usually indented.&lt;br&gt;
  &lt;code&gt;br&lt;/code&gt;
    Creates a break in a line of text. It‚Äôs an empty tag, so there is no closing tag.&lt;br&gt;
  &lt;code&gt;button&lt;/code&gt;
    Defines a clickable button. This can contain text or an image.&lt;br&gt;
  &lt;code&gt;canvas&lt;/code&gt;
    Is used as a container to draw graphics via a script in javascript. This is just a container, the ability to draw is in the javascript.&lt;br&gt;
  &lt;code&gt;cite&lt;/code&gt;
    Defines the title of work in art, literature, film, theater, etc.&lt;br&gt;
  &lt;code&gt;code&lt;/code&gt;
    Defines a piece of computer code.&lt;br&gt;
  &lt;code&gt;data&gt;&lt;/code&gt;
    This allows content to be translated to a machine readable value and also provides for a browser rendering that can be consumed by users.&lt;br&gt;
  &lt;code&gt;datalist&lt;/code&gt;
    Provides a list of predefined for an &lt;code&gt;input&lt;/code&gt; element. This allows for autocomplete via a dropdown.&lt;br&gt;
  &lt;code&gt;del&lt;/code&gt;
    Text that has been deleted from a document.&lt;br&gt;
  &lt;code&gt;details&lt;/code&gt;
    Allows user to show/hide details about something. The default of &lt;code&gt;details&lt;/code&gt; should be hidden unless the attribute is set to open.&lt;br&gt;
  &lt;code&gt;dfm&lt;/code&gt;
    Defines an instance of a term and is usually the first time the term is used in the document.&lt;br&gt;
  &lt;code&gt;div&lt;/code&gt;
    Creates a division within the html. Divs are used in css to style html or to do certain things in javascript.&lt;br&gt;
  &lt;code&gt;dl&lt;/code&gt;
    Description list, is used with &lt;code&gt;dd&lt;/code&gt; and &lt;code&gt;dt&lt;/code&gt;.&lt;br&gt;
  &lt;code&gt;dt&lt;/code&gt;
    Term/name description in a description list. Used with &lt;code&gt;dd&lt;/code&gt; and &lt;code&gt;dl&lt;/code&gt;.&lt;br&gt;
  &lt;code&gt;em&lt;/code&gt;
    Emphasized text.&lt;br&gt;
  &lt;code&gt;embed&lt;/code&gt;
    container for an external application or a plugin.&lt;br&gt;
  &lt;code&gt;fieldset&lt;/code&gt;
    used to group information within a form and creates a box around it.&lt;br&gt;
  &lt;code&gt;figure&lt;/code&gt;
    Specifies self contained content like an illustration, diagram, photos, etc.&lt;br&gt;
  &lt;code&gt;footer&lt;/code&gt;
    Footer of a document, has information it‚Äôs containing content like author, related links, site map, contact info, etc.&lt;br&gt;
  &lt;code&gt;form&lt;/code&gt;
    creates an html form that the user can interact with and enter an input. &lt;code&gt;input&lt;/code&gt; &lt;code&gt;textarea&lt;/code&gt; &lt;code&gt;button&lt;/code&gt; &lt;code&gt;select&lt;/code&gt; &lt;code&gt;option&lt;/code&gt; &lt;code&gt;optgroup&lt;/code&gt; &lt;code&gt;fieldset&lt;/code&gt; &lt;code&gt;label&lt;/code&gt; can all be contained in a form. &lt;code&gt;h1&lt;/code&gt;  to &lt;code&gt;h6&lt;/code&gt; Define html headings. H1 has the most importance, H6 has the least importance.&lt;br&gt;
  &lt;code&gt;header&lt;/code&gt;
    Has introductory content and/or navigation. It can contain &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h6&lt;/code&gt;, logo or authorship info.&lt;br&gt;
  &lt;code&gt;hr&lt;/code&gt;
    defines a thematic break in content and is often used to visually separate content.&lt;br&gt;
  &lt;code&gt;i&lt;/code&gt;
    Identifies a shift in mood or tone within a set of text. Indicates a technical term, ship name, thought in a foreign language, etc. This should be rarely used, other options are &lt;code&gt;em&lt;/code&gt; &lt;code&gt;strong&lt;/code&gt; &lt;code&gt;mark&lt;/code&gt; &lt;code&gt;cite&lt;/code&gt; &lt;code&gt;dfn&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;iframe&lt;/code&gt;
    defines an inline frame and embeds another document within the html.&lt;br&gt;
  &lt;code&gt;img&lt;/code&gt;
    Defines an image within the document. Has 2 required attributes, src and alt.
    &lt;code&gt;img&lt;/code&gt; holds a space for the image. The actual image is linked to the document within
    &lt;code&gt;a&lt;/code&gt; tag.&lt;br&gt;
  &lt;code&gt;input&lt;/code&gt;
    Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
  &lt;code&gt;ins&lt;/code&gt;
    Defines text that has been inserted into a document.&lt;br&gt;
  &lt;code&gt;kpd&lt;/code&gt;
    defines a keyboard input and is a phrase tag. Can be achieved with CSS.&lt;br&gt;
  &lt;code&gt;label&lt;/code&gt;
    Defines a label for an input field.&lt;br&gt;
  &lt;code&gt;main&lt;/code&gt;
    Specifies the main content of a document. There can only be one &lt;code&gt;main&lt;/code&gt; element per document.&lt;br&gt;
  &lt;code&gt;map&lt;/code&gt;
    Creates an image map, which is an image with clickable areas. Contains multiple &lt;code&gt;area&lt;/code&gt; elements.&lt;br&gt;
  &lt;code&gt;mark&lt;/code&gt;
    Will define a section of text you want to mark and highlights it.&lt;br&gt;
  &lt;code&gt;math&lt;/code&gt;
    The top element in MathML, a mathematical markup language, used as an XML application.
  &lt;code&gt;meter&lt;/code&gt;
    Defines a scaled measurement like a gauge or fractional value. Examples are disk usage, query result, etc.&lt;br&gt;
  &lt;code&gt;nav&lt;/code&gt;
    defines a set of navigation links.&lt;br&gt;
  &lt;code&gt;noscript&lt;/code&gt;
    If there are disabled scripts or issues with browser support &lt;code&gt;noscript&lt;/code&gt; allows for alternate content. It can be used in the &lt;code&gt;body&lt;/code&gt; and the &lt;code&gt;head&lt;/code&gt;. If in the &lt;code&gt;head&lt;/code&gt; elements are limited to &lt;code&gt;link&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt;.&lt;br&gt;
  &lt;code&gt;object&lt;/code&gt;
    Identifies embedded objects in the document such as audio, video, javascript, pdf, other web pages, etc.&lt;br&gt;
  &lt;code&gt;ol&lt;/code&gt;
    specifies an ordered list and can be either numeric or alphabetical. Used with &lt;code&gt;li&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;optgroup&lt;/code&gt;
    used to create groups of data in a dropdown list, each group with its own label.&lt;br&gt;
  &lt;code&gt;output&lt;/code&gt;
    Shows the result of a calculation that is run by a script.&lt;br&gt;
  &lt;code&gt;p&lt;/code&gt;
    Paragraph&lt;br&gt;
  &lt;code&gt;pre&lt;/code&gt;
    Preformatted text that preserved line breaks and spaces within the html.&lt;br&gt;
  &lt;code&gt;progress&lt;/code&gt;
    Shows the progress as a task.&lt;br&gt;
  &lt;code&gt;q&lt;/code&gt;
    Short quotation.&lt;br&gt;
  &lt;code&gt;ruby&lt;/code&gt;
    specifies a ruby annotation. It‚Äôs attached to the main text to indicate the pronunciation or meaning on the text. Used with east asian typography.&lt;br&gt;
  &lt;code&gt;s&lt;/code&gt;
    Indicates content is not longer accurate.&lt;br&gt;
  &lt;code&gt;samp&lt;/code&gt;
    Defines sample output from computer program.&lt;br&gt;
  &lt;code&gt;script&lt;/code&gt;
    Where scripts instructions are kept or link to external ones. Used to dynamically create block and/or inline content&lt;br&gt;
  &lt;code&gt;section&lt;/code&gt;
    defines sections of a document like chapters headers or footers.&lt;br&gt;
  &lt;code&gt;select&lt;/code&gt;
    creates a drop down list. Used with &lt;code&gt;option&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;small&lt;/code&gt;
    Defines smaller text or side comments.&lt;br&gt;
  &lt;code&gt;span&lt;/code&gt;
    Used to ground inline elements in a document.&lt;br&gt;
  &lt;code&gt;strong&lt;/code&gt;
    is a phrase tag that emphasizes important text.&lt;br&gt;
  &lt;code&gt;sub&lt;/code&gt;
    Allows for subscript text which appears half a character below the baseline of text.&lt;br&gt;
  &lt;code&gt;sup&lt;/code&gt;
    Allows for subscript text which appears half a character above the baseline of text.&lt;br&gt;
  &lt;code&gt;svg&lt;/code&gt;
    container for svg graphics which has many ways of drawing shapes, lines and images.&lt;br&gt;
  &lt;code&gt;table&lt;/code&gt;
    Creates an HTML table that contains &lt;code&gt;tr&lt;/code&gt; &lt;code&gt;th&lt;/code&gt; and &lt;code&gt;td&lt;/code&gt; and can also be as complex to include &lt;caption&gt; &lt;col&gt; &lt;colgroup&gt; &lt;thread&gt; &lt;tfoot&gt; &lt;tbody&gt;
  &lt;code&gt;template&lt;/code&gt;
    Allows content to be hidden from the user, and it won‚Äôt be rendered in the browser.&lt;br&gt;
  &lt;code&gt;textarea&lt;/code&gt;
    creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
  &lt;code&gt;time&lt;/code&gt;
    human readable date or time. Can also encode dates/times in a machine readable way.&lt;br&gt;
  &lt;code&gt;ul&lt;/code&gt;
    defines an unordered, bulleted list. Each list item is defined by &lt;code&gt;li&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;var&lt;/code&gt;
    phrase tage used to define a variable.&lt;br&gt;
  &lt;code&gt;video&lt;/code&gt;
    defines a video like a movie clip or video streaming. Files supported are .mp4, .ogg, .webm
  &lt;code&gt;wbr&lt;/code&gt;
    A position within text where the browser may optionally break a line, but not always at the location the element is in.
    &lt;br&gt;

&lt;h3&gt;Sectioning Content&lt;/h3&gt;
  &lt;code&gt;article&lt;/code&gt;
    Defines an article in the document which could be a blog post, news story, comment, etc.&lt;br&gt;
  &lt;code&gt;aside&lt;/code&gt;
    Defines content aside from main content. Aside content should still be related to the main content.&lt;br&gt;
  &lt;code&gt;footer&lt;/code&gt;
    Footer of a document, has information it‚Äôs containing content like author, related links, site map, contact info, etc.&lt;br&gt;
  &lt;code&gt;header&lt;/code&gt;
    Has introductory content and/or navigation. It can contain &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h6&lt;/code&gt;, logo or authorship info.&lt;br&gt;
  &lt;code&gt;nav&lt;/code&gt;
    defines a set of navigation links.&lt;br&gt;
  &lt;code&gt;section&lt;/code&gt;
    defines sections of a document like chapters headers or footers.&lt;br&gt;
    &lt;br&gt;

&lt;h3&gt;Heading Content&lt;/h3&gt;
  &lt;code&gt;h1&lt;/code&gt; &lt;code&gt;h2&lt;/code&gt; &lt;code&gt;h3&lt;/code&gt; &lt;code&gt;h4&lt;/code&gt; &lt;code&gt;h5&lt;/code&gt; &lt;code&gt;h6&lt;/code&gt;
    Six levels of section headings. &lt;code&gt;h1&lt;/code&gt; is the highest section level and &lt;code&gt;h6&lt;/code&gt; is the lowest..&lt;br&gt;
    &lt;br&gt;

&lt;h3&gt;Phrasing Content&lt;/h3&gt;
  &lt;code&gt;abbr&lt;/code&gt;
    Defines something as an abbreviation or an acronym&lt;br&gt;
  &lt;code&gt;audio&lt;/code&gt;
    Defines audio content in the document. It accepts .mp3, .wav and .ogg&lt;br&gt;
  &lt;code&gt;b&lt;/code&gt;
    Styles text within the html to be bold.&lt;br&gt;
  &lt;code&gt;bdo&lt;/code&gt;
    overrides the text direction of the entire document.&lt;br&gt;
  &lt;code&gt;br&lt;/code&gt;
    Creates a break in a line of text. It‚Äôs an empty tag, so there is no closing tag.&lt;br&gt;
  &lt;code&gt;button&lt;/code&gt;
    defines a clickable button. This can contain text or an image.&lt;br&gt;
  &lt;code&gt;canvas&lt;/code&gt;
    is used as a container to draw graphics via a script in javascript. This is just a container, the ability to draw is in the javascript.&lt;br&gt;
  &lt;code&gt;cite&lt;/code&gt;
    Defines the title of work in art, literature, film, theater, etc.&lt;br&gt;
  &lt;code&gt;code&lt;/code&gt;
    defines a piece of computer code.&lt;br&gt;
  &lt;code&gt;data&gt;&lt;/code&gt;
    This allows content to be translated to a machine readable value and also provides for a browser rendering that can be consumed by users.&lt;br&gt;
  &lt;code&gt;datalist&lt;/code&gt;
    provides a list of predefined for an &lt;code&gt;input&lt;/code&gt; element. This allows for autocomplete via a dropdown.&lt;br&gt;
  &lt;code&gt;dfn&lt;/code&gt;
    Defines an instance of a term and is usually the first time the term is used in the document.&lt;br&gt;
  &lt;code&gt;em&lt;/code&gt;
    emphasized text.&lt;br&gt;
  &lt;code&gt;embed&lt;/code&gt;
    container for an external application or a plugin.&lt;br&gt;
  &lt;code&gt;i&lt;/code&gt;
    Identifies a shift in mood or tone within a set of text. Indicates a technical term, ship name, thought in a foreign language, etc. This should be rarely used, other options are &lt;code&gt;em&lt;/code&gt; &lt;code&gt;strong&lt;/code&gt; &lt;code&gt;mark&lt;/code&gt; &lt;code&gt;cite&lt;/code&gt; &lt;code&gt;dfn&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;iframe&lt;/code&gt;
    defines an inline frame and embeds another document within the html.&lt;br&gt;
  &lt;code&gt;img&lt;/code&gt;
    Defines an image within the document. Has 2 required attributes, src and alt. &lt;code&gt;img&lt;/code&gt; holds a space for the image. The actual image is linked to the document within &lt;code&gt;a&lt;/code&gt; tag.&lt;br&gt;
  &lt;code&gt;input&lt;/code&gt;
    Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
  &lt;code&gt;kbd&lt;/code&gt;
    defines a keyboard input and is a phrase tag. Can be achieved with CSS.&lt;br&gt;
  &lt;code&gt;label&lt;/code&gt;
    Defines a label for an input field.&lt;br&gt;
  &lt;code&gt;mark&lt;/code&gt;
    Will define a section of text you want to mark and highlights it.&lt;br&gt;
  &lt;code&gt;meter&lt;/code&gt;
    Defines a scaled measurement like a gauge or fractional value. Examples are disk usage, query result, etc.&lt;br&gt;
  &lt;code&gt;math&lt;/code&gt;
    The top element in MathML, a mathematical markup language, used as an XML application.
  &lt;code&gt;noscript&lt;/code&gt;
    If there are disabled scripts or issues with browser support &lt;code&gt;noscript&lt;/code&gt; allows for alternate content. It can be used in the &lt;code&gt;body&lt;/code&gt; and the &lt;code&gt;head&lt;/code&gt;. If in the &lt;code&gt;head&lt;/code&gt; elements are limited to &lt;code&gt;link&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt;.&lt;br&gt;
  &lt;code&gt;object&lt;/code&gt;
    Identifies embedded objects in the document such as audio, video, javascript, pdf, other web pages, etc.&lt;br&gt;
  &lt;code&gt;output&lt;/code&gt;
    Shows the result of a calculation that is run by a script.&lt;br&gt;
  &lt;code&gt;progress&lt;/code&gt;
    Shows the progress as a task.&lt;br&gt;
  &lt;code&gt;q&lt;/code&gt;
    Short quotation.&lt;br&gt;
  &lt;code&gt;small&lt;/code&gt;
    Defines smaller text or side comments.&lt;br&gt;
  &lt;code&gt;span&lt;/code&gt;
    Used to ground inline elements in a document.&lt;br&gt;
  &lt;code&gt;strong&lt;/code&gt;
    is a phrase tag that emphasizes important text.&lt;br&gt;
  &lt;code&gt;sub&lt;/code&gt;
    Allows for subscript text which appears half a character below the baseline of text.&lt;br&gt;
  &lt;code&gt;sup&lt;/code&gt;
    Allows for subscript text which appears half a character above the baseline of text.&lt;br&gt;
  &lt;code&gt;svg&lt;/code&gt;
    container for svg graphics which has many ways of drawing shapes, lines and images.&lt;br&gt;
  &lt;code&gt;textarea&lt;/code&gt; c
    reates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
  &lt;code&gt;time&lt;/code&gt;
    human readable date or time. Can also encode dates/times in a machine readable way.&lt;br&gt;
  &lt;code&gt;var&lt;/code&gt;
    phrase tage used to define a variable.&lt;br&gt;
  &lt;code&gt;video&lt;/code&gt;
    defines a video like a movie clip or video streaming. Files supported are .mp4, .ogg, .webm
  &lt;code&gt;wbr&lt;/code&gt;
    A position within text where the browser may optionally break a line, but not always at the location the element is in.
    &lt;br&gt;

&lt;h3&gt;Embedded Content&lt;/h3&gt;
  &lt;code&gt;audio&lt;/code&gt;
    Defines audio content in the document. It accepts .mp3, .wav and .ogg&lt;br&gt;
  &lt;code&gt;canvas&lt;/code&gt;
    is used as a container to draw graphics via a script in javascript. This is just a container, the ability to draw is in the javascript.&lt;br&gt;
  &lt;code&gt;embed&lt;/code&gt;
    container for an external application or a plugin.&lt;br&gt;
  &lt;code&gt;iframe&lt;/code&gt;
    defines an inline frame and embeds another document within the html.&lt;br&gt;
  &lt;code&gt;img&lt;/code&gt;
    Defines an image within the document. Has 2 required attributes, src and alt. &lt;code&gt;img&lt;/code&gt; holds a space for the image. The actual image is linked to the document within &lt;code&gt;a&lt;/code&gt; tag.&lt;br&gt;
  &lt;code&gt;math&lt;/code&gt;
    The top element in MathML, a mathematical markup language, used as an XML application.
  &lt;code&gt;object&lt;/code&gt;
    Identifies embedded objects in the document such as audio, video, javascript, pdf, other web pages, etc.&lt;br&gt;
  &lt;code&gt;svg&lt;/code&gt;
    container for svg graphics which has many ways of drawing shapes, lines and images.&lt;br&gt;
  &lt;code&gt;video&lt;/code&gt;
    defines a video like a movie clip or video streaming. Files supported are .mp4, .ogg, .webm
    &lt;br&gt;

&lt;h3&gt;Interactive Content&lt;/h3&gt;
  &lt;code&gt;a&lt;/code&gt;
    Defines something as a hyperlink; an interactive element that will take the user to another page.&lt;br&gt;
  &lt;code&gt;button&lt;/code&gt;
    defines a clickable button. This can contain text or an image.&lt;br&gt;
  &lt;code&gt;details&lt;/code&gt;
    Allows user to show/hide details about something. The default of &lt;code&gt;details&lt;/code&gt; should be hidden unless the attribute is set to open.&lt;br&gt;
  &lt;code&gt;embed&lt;/code&gt;
    container for an external application or a plugin.&lt;br&gt;
  &lt;code&gt;iframe&lt;/code&gt;
    defines an inline frame and embeds another document within the html.&lt;br&gt;
  &lt;code&gt;label&lt;/code&gt;
    Defines a label for an input field.&lt;br&gt;
  &lt;code&gt;select&lt;/code&gt;
    creates a drop down list. Used with &lt;code&gt;option&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;textarea&lt;/code&gt;
    creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
    &lt;br&gt;

&lt;h3&gt;Form Associated Content&lt;/h3&gt;
&lt;h4&gt;Listed&lt;/h4&gt;
  &lt;code&gt;button&lt;/code&gt;
    defines a clickable button. This can contain text or an image.&lt;br&gt;
  &lt;code&gt;fieldset&lt;/code&gt;
    used to group information within a form and creates a box around it.&lt;br&gt;
  &lt;code&gt;input&lt;/code&gt;
    Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
  &lt;code&gt;object&lt;/code&gt;
    Identifies embedded objects in the document such as audio, video, javascript, pdf, other web pages, etc.&lt;br&gt;
  &lt;code&gt;output&lt;/code&gt;
    Shows the result of a calculation that is run by a script.&lt;br&gt;
  &lt;code&gt;select&lt;/code&gt;
    creates a drop down list.&lt;br&gt;
  &lt;code&gt;textarea&lt;/code&gt;
    creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
    &lt;br&gt;

&lt;h4&gt;Lableable&lt;/h4&gt;
  &lt;code&gt;button&lt;/code&gt;
    defines a clickable button. This can contain text or an image.&lt;br&gt;
  &lt;code&gt;input&lt;/code&gt;
    Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
  &lt;code&gt;label&lt;/code&gt;
    Defines a label for an input field.&lt;br&gt;
  &lt;code&gt;meter&lt;/code&gt;
    Defines a scaled measurement like a gauge or fractional value. Examples are disk usage, query result, etc.&lt;br&gt;
  &lt;code&gt;output&lt;/code&gt;
    Shows the result of a calculation that is run by a script.&lt;br&gt;
  &lt;code&gt;progress&lt;/code&gt;
    Shows the progress as a task.&lt;br&gt;
  &lt;code&gt;select&lt;/code&gt;
    creates a drop down list.&lt;br&gt;
  &lt;code&gt;textarea&lt;/code&gt;
    creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
    &lt;br&gt;

&lt;h4&gt;Submitable&lt;/h4&gt;
&lt;code&gt;button&lt;/code&gt;
  defines a clickable button. This can contain text or an image.&lt;br&gt;
&lt;code&gt;output&lt;/code&gt;
  Shows the result of a calculation that is run by a script.&lt;br&gt;
&lt;code&gt;select&lt;/code&gt;
  creates a drop down list.&lt;br&gt;
&lt;code&gt;textarea&lt;/code&gt;
  creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
  &lt;br&gt;

&lt;h4&gt;Resetable&lt;/h4&gt;
&lt;code&gt;input&lt;/code&gt;
  Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
&lt;code&gt;output&lt;/code&gt;
  Shows the result of a calculation that is run by a script.&lt;br&gt;
&lt;code&gt;select&lt;/code&gt;
  creates a drop down list.&lt;br&gt;
&lt;code&gt;textarea&lt;/code&gt;
  creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
  &lt;code&gt;button&lt;/code&gt;
    defines a clickable button. This can contain text or an image.&lt;br&gt;
  &lt;code&gt;fieldset&lt;/code&gt;
    used to group information within a form and creates a box around it.&lt;br&gt;
  &lt;code&gt;form&lt;/code&gt;
    creates an html form that the user can interact with and enter an input. &lt;code&gt;input&lt;/code&gt; &lt;code&gt;textarea&lt;/code&gt; &lt;code&gt;button&lt;/code&gt; &lt;code&gt;select&lt;/code&gt; &lt;code&gt;option&lt;/code&gt; &lt;code&gt;optgroup&lt;/code&gt; &lt;code&gt;fieldset&lt;/code&gt; &lt;code&gt;label&lt;/code&gt; can all be contained in a form. &lt;code&gt;h1&lt;/code&gt;  to &lt;code&gt;h6&lt;/code&gt; Define html headings. H1 has the most importance, H6 has the least importance.&lt;br&gt;
  &lt;code&gt;input&lt;/code&gt;
    Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
  &lt;code&gt;label&lt;/code&gt;
    Defines a label for an input field.&lt;br&gt;
  &lt;code&gt;meter&lt;/code&gt;
    Defines a scaled measurement like a gauge or fractional value. Examples are disk usage, query result, etc.&lt;br&gt;
  &lt;code&gt;object&lt;/code&gt;
    Identifies embedded objects in the document such as audio, video, javascript, pdf, other web pages, etc.&lt;br&gt;
  &lt;code&gt;output&lt;/code&gt;
    Shows the result of a calculation that is run by a script.&lt;br&gt;
  &lt;code&gt;progress&lt;/code&gt;
    Shows the progress as a task.&lt;br&gt;
  &lt;code&gt;select&lt;/code&gt;
    creates a drop down list. Used with &lt;code&gt;option&lt;/code&gt;&lt;br&gt;
  &lt;code&gt;textarea&lt;/code&gt;
    creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
&lt;br&gt;

&lt;details&gt;
  &lt;summary&gt;
      &lt;h3&gt;All Elements&lt;/h3&gt;
  &lt;/summary&gt;
&lt;code&gt;!--...--&lt;/code&gt; A way to make notes in the html without it affecting the actual document&lt;br&gt;
&lt;code&gt;!DOCTYPE&lt;/code&gt; Defines the doc type
&lt;code&gt;a&lt;/code&gt; Defines something as a hyperlink; an interactive element that will take the user to another page.&lt;br&gt;
&lt;code&gt;abbr&lt;/code&gt; Defines something as an abbreviation or an acronym&lt;br&gt;
&lt;code&gt;address&lt;/code&gt; Contact info for the owner of a document&lt;br&gt;
&lt;code&gt;area&lt;/code&gt; Defines area inside of an image map which has clickable area in it. It‚Äôs always contained within a map element.&lt;br&gt;
&lt;code&gt;article&lt;/code&gt; Defines an article in the document which could be a blog post, news story, comment, etc.&lt;br&gt;
&lt;code&gt;aside&lt;/code&gt; Defines content aside from main content. Aside content should still be related to the main content.&lt;br&gt;
&lt;code&gt;audio&lt;/code&gt; Defines audio content in the document. It accepts .mp3, .wav and .ogg&lt;br&gt;
&lt;code&gt;b&lt;/code&gt; Styles text within the html to be bold.&lt;br&gt;
&lt;code&gt;base&lt;/code&gt; Determines the base url for all links. When a link goes off to an external site this element has to appear before it.&lt;br&gt;
&lt;code&gt;bdi&lt;/code&gt; Stands for bidirectional isolation. This is to take specific text and change the directionality from the direction of the text around it.&lt;br&gt;
&lt;code&gt;bdo&lt;/code&gt; overrides the text direction of the entire document.&lt;br&gt;
&lt;code&gt;blockquote&lt;/code&gt; Will define content quoted from another source, and is usually indented.&lt;br&gt;
&lt;code&gt;body&lt;/code&gt; defines all the content within the html document. Everything in the body is visible to the user.&lt;br&gt;
&lt;code&gt;br&lt;/code&gt; Creates a break in a line of text. It‚Äôs an empty tag, so there is no closing tag.&lt;br&gt;
&lt;code&gt;button&lt;/code&gt; defines a clickable button. This can contain text or an image.&lt;br&gt;
&lt;code&gt;canvas&lt;/code&gt; is used as a container to draw graphics via a script in javascript. This is just a container, the ability to draw is in the javascript.&lt;br&gt;
&lt;code&gt;caption&lt;/code&gt; Lives within a &lt;code&gt;table&lt;/code&gt; and allows one caption per table.&lt;br&gt;
&lt;code&gt;cite&lt;/code&gt; Defines the title of work in art, literature, film, theater, etc.&lt;br&gt;
&lt;code&gt;code&lt;/code&gt; defines a piece of computer code.&lt;br&gt;
&lt;code&gt;col&lt;/code&gt; Defines properties of a column within a &lt;code&gt;colgroup&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;colgroup&lt;/code&gt; defines formatting multiple columns within a table. &lt;br&gt;
&lt;code&gt;data&gt;&lt;/code&gt;This allows content to be translated to a machine readable value and also provides for a browser rendering that can be consumed by users.&lt;br&gt;
&lt;code&gt;datalist&lt;/code&gt;provides a list of predefined for an &lt;code&gt;input&lt;/code&gt; element. This allows for autocomplete via a dropdown.&lt;br&gt;
&lt;code&gt;dd&lt;/code&gt; Allows for a term/name description list. It is used with &lt;code&gt;dl&lt;/code&gt; and &lt;code&gt;dt&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;del&lt;/code&gt; Text that has been deleted from a document.&lt;br&gt;
&lt;code&gt;details&lt;/code&gt; Allows user to show/hide details about something. The default of &lt;code&gt;details&lt;/code&gt; should be hidden unless the attribute is set to open.&lt;br&gt;
&lt;code&gt;dfm&lt;/code&gt; Defines an instance of a term and is usually the first time the term is used in the document.&lt;br&gt;
&lt;code&gt;dialog&lt;/code&gt; creates a dialog box, often used for pop ups or modals.&lt;br&gt;
&lt;code&gt;div&lt;/code&gt; creates a division within the html. Divs are used in css to style html or to do certain things in javascript.&lt;br&gt;
&lt;code&gt;dl&lt;/code&gt; Description list, is used with &lt;code&gt;dd&lt;/code&gt; and &lt;code&gt;dt&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;dt&lt;/code&gt; term/name description in a description list. Used with &lt;code&gt;dd&lt;/code&gt; and &lt;code&gt;dl&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;em&lt;/code&gt; emphasized text.&lt;br&gt;
&lt;code&gt;embed&lt;/code&gt; container for an external application or a plugin.&lt;br&gt;
&lt;code&gt;fieldset&lt;/code&gt; used to group information within a form and creates a box around it.&lt;br&gt;
&lt;code&gt;figcap&lt;/code&gt; Caption for a &lt;code&gt;figure&lt;/code&gt; element. Can be the first or last child of the element.&lt;br&gt;
&lt;code&gt;figure&lt;/code&gt; Specifies self contained content like an illustration, diagram, photos, etc.&lt;br&gt;
&lt;code&gt;footer&lt;/code&gt; Footer of a document, has information it‚Äôs containing content like author, related links, site map, contact info, etc.&lt;br&gt;
&lt;code&gt;form&lt;/code&gt; creates an html form that the user can interact with and enter an input. &lt;code&gt;input&lt;/code&gt; &lt;code&gt;textarea&lt;/code&gt; &lt;code&gt;button&lt;/code&gt; &lt;code&gt;select&lt;/code&gt; &lt;code&gt;option&lt;/code&gt; &lt;code&gt;optgroup&lt;/code&gt; &lt;code&gt;fieldset&lt;/code&gt; &lt;code&gt;label&lt;/code&gt; can all be contained in a form. &lt;code&gt;h1&lt;/code&gt;  to &lt;code&gt;h6&lt;/code&gt; Define html headings. H1 has the most importance, H6 has the least importance.&lt;br&gt;
&lt;code&gt;head&lt;/code&gt; Where all the metadata and other processing info is kept. &lt;code&gt;title&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; &lt;code&gt;head&lt;/code&gt; Where all the metadata and other processing info is kept. &lt;code&gt;title&lt;/code&gt; &lt;code&gt;base&lt;/code&gt; &lt;code&gt;link&lt;/code&gt; &lt;code&gt;meta&lt;/code&gt; &lt;code&gt;script&lt;/code&gt; &lt;code&gt;noscript&lt;/code&gt; can all go in the head.&lt;br&gt;
&lt;code&gt;link&lt;/code&gt; &lt;code&gt;meta&lt;/code&gt; &lt;code&gt;script&lt;/code&gt; &lt;code&gt;noscript&lt;/code&gt; can all go in the head.&lt;br&gt;
&lt;code&gt;header&lt;/code&gt; Has introductory content and/or navigation. It can contain &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h6&lt;/code&gt;, logo or authorship info.&lt;br&gt;
&lt;code&gt;hr&lt;/code&gt; defines a thematic break in content and is often used to visually separate content.&lt;br&gt;
&lt;code&gt;html&lt;/code&gt; identifies the document as html and communicates it to the browser. It contains all html elements except &lt;code&gt;!DOCTYPE&lt;/code&gt;&lt;br&gt;
&lt;code&gt;i&lt;/code&gt; Identifies a shift in mood or tone within a set of text. Indicates a technical term, ship name, thought in a foreign language, etc. This should be rarely used, other options are &lt;code&gt;em&lt;/code&gt; &lt;code&gt;strong&lt;/code&gt; &lt;code&gt;mark&lt;/code&gt; &lt;code&gt;cite&lt;/code&gt; &lt;code&gt;dfn&lt;/code&gt;&lt;br&gt;
&lt;code&gt;iframe&lt;/code&gt; defines an inline frame and embeds another document within the html.&lt;br&gt;
&lt;code&gt;img&lt;/code&gt; Defines an image within the document. Has 2 required attributes, src and alt. &lt;code&gt;img&lt;/code&gt; holds a space for the image. The actual image is linked to the document within &lt;code&gt;a&lt;/code&gt; tag.&lt;br&gt;
&lt;code&gt;input&lt;/code&gt; Used within the &lt;code&gt;form&lt;/code&gt; element, this allows user to input data into the form.&lt;br&gt;
&lt;code&gt;ins&lt;/code&gt; Defines text that has been inserted into a document.&lt;br&gt;
&lt;code&gt;kpd&lt;/code&gt; defines a keyboard input and is a phrase tag. Can be achieved with CSS.&lt;br&gt;
&lt;code&gt;label&lt;/code&gt; Defines a label for an input field.&lt;br&gt;
&lt;code&gt;legend&lt;/code&gt; for a &lt;code&gt;fieldset&lt;/code&gt; element.&lt;br&gt;
&lt;code&gt;li&lt;/code&gt; Creates a list item and is used with &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;ol&lt;/code&gt; and &lt;code&gt;menu&lt;/code&gt;&lt;br&gt;
&lt;code&gt;link&lt;/code&gt; Used to connect a document to an external resource such as external stylesheets.&lt;br&gt;
&lt;code&gt;main&lt;/code&gt; Specifies the main content of a document. There can only be one &lt;code&gt;main&lt;/code&gt; element per document.&lt;br&gt;
&lt;code&gt;map&lt;/code&gt; Creates an image map, which is an image with clickable areas. Contains multiple &lt;code&gt;area&lt;/code&gt; elements.&lt;br&gt;
&lt;code&gt;mark&lt;/code&gt; Will define a section of text you want to mark and highlights it.&lt;br&gt;
&lt;code&gt;meta&lt;/code&gt; Specifies all the metadata within the html document, like author, description or keywords. This information is not visible on the page.&lt;br&gt;
&lt;code&gt;meter&lt;/code&gt; Defines a scaled measurement like a gauge or fractional value. Examples are disk usage, query result, etc.&lt;br&gt;
&lt;code&gt;nav&lt;/code&gt; defines a set of navigation links.&lt;br&gt;
&lt;code&gt;noscript&lt;/code&gt; If there are disabled scripts or issues with browser support &lt;code&gt;noscript&lt;/code&gt; allows for alternate content. It can be used in the &lt;code&gt;body&lt;/code&gt; and the &lt;code&gt;head&lt;/code&gt;. If in the &lt;code&gt;head&lt;/code&gt; elements are limited to &lt;code&gt;link&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;object&lt;/code&gt; Identifies embedded objects in the document such as audio, video, javascript, pdf, other web pages, etc.&lt;br&gt;
&lt;code&gt;ol&lt;/code&gt; specifies an ordered list and can be either numeric or alphabetical. Used with &lt;code&gt;li&lt;/code&gt;&lt;br&gt;
&lt;code&gt;optgroup&lt;/code&gt; used to create groups of data in a dropdown list, each group with its own label.&lt;br&gt;
&lt;code&gt;option&lt;/code&gt; Defines objects in a select list/dropdown. Used with either &lt;code&gt;select&lt;/code&gt; or &lt;code&gt;datalist&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;output&lt;/code&gt; Shows the result of a calculation that is run by a script.&lt;br&gt;
&lt;code&gt;p&lt;/code&gt; Paragraph&lt;br&gt;
&lt;code&gt;param&lt;/code&gt; defines parameters for plugins embedded with &lt;code&gt;object&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;picture&lt;/code&gt; Allows for multiple designed images to be used depending on the browser viewport. You can use &lt;img&gt; or &lt;source&gt; tags with it.&lt;br&gt;
&lt;code&gt;pre&lt;/code&gt; Preformatted text that preserved line breaks and spaces within the html.&lt;br&gt;
&lt;code&gt;progress&lt;/code&gt; Shows the progress as a task.&lt;br&gt;
&lt;code&gt;q&lt;/code&gt;Short quotation.&lt;br&gt;
&lt;code&gt;rp&lt;/code&gt; Creates parentheses around a ruby text, shown by browsers that don‚Äôt support ruby annotations.&lt;br&gt;.
&lt;code&gt;rt&lt;/code&gt; gives a ruby annotation that defines an explanation/pronunciation for east asian typography. Used with &lt;code&gt;ruby&lt;/code&gt; and &lt;code&gt;rt&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;ruby&lt;/code&gt; specifies a ruby annotation. It‚Äôs attached to the main text to indicate the pronunciation or meaning on the text. Used with east asian typography.&lt;br&gt;
&lt;code&gt;s&lt;/code&gt; Indicates content is not longer accurate.&lt;br&gt;
&lt;code&gt;samp&lt;/code&gt; Defines sample output from computer program.&lt;br&gt;
&lt;code&gt;script&lt;/code&gt; Where scripts instructions are kept or link to external ones. Used to dynamically create block and/or inline content&lt;br&gt;
&lt;code&gt;section&lt;/code&gt; defines sections of a document like chapters headers or footers.&lt;br&gt;
&lt;code&gt;select&lt;/code&gt; creates a drop down list. Used with &lt;code&gt;option&lt;/code&gt;&lt;br&gt;
&lt;code&gt;small&lt;/code&gt; Defines smaller text or side comments.&lt;br&gt;
&lt;code&gt;source&lt;/code&gt; The source tag is used to indicate multiple media resources like &lt;code&gt;video&lt;/code&gt; &lt;code&gt;audio&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt;&lt;br&gt;
&lt;code&gt;span&lt;/code&gt; Used to ground inline elements in a document.&lt;br&gt;
&lt;code&gt;strong&lt;/code&gt; is a phrase tag that emphasizes important text.&lt;br&gt;
&lt;code&gt;style&lt;/code&gt; defines style info in the document and specifies how different elements should be styled.&lt;br&gt;
&lt;code&gt;sub&lt;/code&gt; Allows for subscript text which appears half a character below the baseline of text.&lt;br&gt;
&lt;code&gt;summary&lt;/code&gt; creates a visible heading for the &lt;code&gt;details&lt;/code&gt; element.&lt;br&gt;
&lt;code&gt;sup&lt;/code&gt; Allows for subscript text which appears half a character above the baseline of text.&lt;br&gt;
&lt;code&gt;svg&lt;/code&gt; container for svg graphics which has many ways of drawing shapes, lines and images.&lt;br&gt;
&lt;code&gt;table&lt;/code&gt; Creates an HTML table that contains &lt;code&gt;tr&lt;/code&gt; &lt;code&gt;th&lt;/code&gt; and &lt;code&gt;td&lt;/code&gt; and can also be as complex to include &lt;caption&gt; &lt;col&gt; &lt;colgroup&gt; &lt;thread&gt; &lt;tfoot&gt; &lt;tbody&gt;
&lt;code&gt;tbody&lt;/code&gt; Body content in an html table.&lt;br&gt;
&lt;code&gt;td&lt;/code&gt; standard cell within an html table. &lt;br&gt;
&lt;code&gt;template&lt;/code&gt; Allows content to be hidden from the user, and it won‚Äôt be rendered in the browser.&lt;br&gt;
&lt;code&gt;textarea&lt;/code&gt; creates a multiline input control and can hold an unlimited number of characters.&lt;br&gt;
&lt;code&gt;tfoot&lt;/code&gt; groups footer content inside an html table.&lt;br&gt;
&lt;code&gt;th&lt;/code&gt; header cell in an html table.&lt;br&gt;
&lt;code&gt;thead&lt;/code&gt; groups header content inside an html table.&lt;br&gt;
&lt;code&gt;time&lt;/code&gt; human readable date or time. Can also encode dates/times in a machine readable way.&lt;br&gt;
&lt;code&gt;title&lt;/code&gt; title of a document, specified in the &lt;code&gt;head&lt;/code&gt; section in an html document. The content entered here appears in the browser toolbar, creates a title when the page is added to favorites and displays a title in search engine results.&lt;br&gt;
&lt;code&gt;tr&lt;/code&gt; row in an html table.&lt;br&gt;
&lt;code&gt;track&lt;/code&gt; text tracks for media elements, is visible when the media is playing.&lt;br&gt;
&lt;code&gt;u&lt;/code&gt; Used for text that should be stylistically different. Usage should be avoided because its easily confused with a link.&lt;br&gt;
&lt;code&gt;ul&lt;/code&gt; defines an unordered, bulleted list. Each list item is defined by &lt;code&gt;li&lt;/code&gt;&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; phrase tage used to define a variable.&lt;br&gt;
&lt;code&gt;video&lt;/code&gt; defines a video like a movie clip or video streaming. Files supported are .mp4, .ogg, .webm
&lt;/details&gt;
&lt;/section&gt;
</description>
        <pubDate>Fri, 21 Sep 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/blog/post/2018/09/21/htmlelements.html</link>
        <guid isPermaLink="true">http://localhost:4000/blog/post/2018/09/21/htmlelements.html</guid>
        
        
        <category>blog</category>
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Apprenticeship Goals</title>
        <description>&lt;header&gt;
  &lt;h1&gt;Apprenticeship Goals&lt;/h1&gt;
&lt;/header&gt;

&lt;section&gt;
  &lt;p&gt;
  This week I started my design apprenticeship at 8th Light. As I am at the beginning of my journey here, I have some thoughts about how I want to improve during my apprenticeship.
  &lt;/p&gt;

&lt;h2&gt;Where I‚Äôve been&lt;/h2&gt;
  &lt;p&gt;
  I‚Äôm a native Texan where I come from a traditional graphic design background. I received my undergrad there, and instantly realized I couldn't stand the subjectivity of branding and art direction. My last year there I was fortunate enough to get an introduction to UX by taking some usability and app design courses, which changed everything for me. Shortly after graduating I moved with my (now) wife up to Chicago, where I started working as a Product Designer at Threadless.
  There I got to work in a more generalist environment, doing research, ux, visual design and some front end on a platform called Artist Shops. I loved being able to have that focus on a single product and to have an impact on it through every step of our design process. Since then, I‚Äôve been a contract UX Designer at some larger fortune 500 corporations, first at United Airlines and most recently at Blue Cross Blue Shield. The work that I‚Äôve done in the past 2 years has given me valuable experience in conducting ux research, evidence based design, interaction design, accessibility and visual design.
  &lt;/p&gt;

&lt;h2&gt;Where I want to go&lt;/h2&gt;
    &lt;p&gt;
    I‚Äôve noticed a common frustration in my experience as a designer: bad code limits access between humans and quality user experiences. This is common thing most professionals in the software world can understand. That sense of hopelessness you get as a designer when after months of research, white boarding and prototyping gets de-scoped into something unrecognizable. On the other hand,  developers often get handled a mock-up with zero documentation and functionality
    that doesn‚Äôt exist within the current framework. I'm sure there are many reasons why this happens, but in the end, it's hard handoffs between design and development that makes users hate bad software.
    &lt;/p&gt;

    &lt;h4&gt;Front End Development&lt;/h4&gt;
      &lt;p&gt;
      My primary goal is to focus more on front end development,  as I feel it is my weakest area.  I'm competent in building a pretty basic html/css responsive site. I would like to strengthen my skills and knowledge regarding implementation of my code. I'm still very new to GitHub, and specifically would like to understand best practices about file structure, branches and repositories. I‚Äôd also like to get experience workings in component libraries. On the design side, I'm pretty obsessed with pattern libraries, and have even built one myself, but would love to understand the front end side of things as well. I've done extensive work on the design side of accessibility standards but I would like to strengthen my development skills in that area as well.
      &lt;/p&gt;

    &lt;h4&gt;Design&lt;/h4&gt;
      &lt;p&gt;
      In terms of UX and visual design, I'm experienced and confident in many subjects, but there are definitely areas to improve. In the past I've planned, conducted and synthesized user research into UX strategy, but I've never had the opportunity to sit down with stakeholders and define an mvp with feature prioritization. One of the things that won me over during my interview was learning about how designers have impact on a product starting with the first meeting with the client. In addition, I would like to strengthen my skills with content management and strategy. In my past job I did have the  opportunity to work with a content strategist. As designers, we tend to box the &quot;user experience&quot; to just the interface on the screen and we often forget about the words that we use.
      &lt;/p&gt;

    &lt;h2&gt;How I'm going to get there&lt;/h2&gt;
      &lt;p&gt;
        I think the biggest challenge for me is training my brain to think in a different way. Coming from a design background where everything is done is a visual way. This week I began introducing myself to our blog framework which includes understanding the command line and working with ruby. By forcing myself to change my visual right sided brain to think in a more analytical and linear way, I'm making myself extremely uncomfortable, which I couldn't be happier about. Even though I'm putting myself in unfamiliar territory, the people here at 8th Light have been amazing in helping me to work through my blockers quickly and providing me with resources to grow as a professional.
      &lt;/p&gt;
&lt;/section&gt;
</description>
        <pubDate>Fri, 21 Sep 2018 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/jekyll/update/2018/09/21/apprenticeship-goals.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/update/2018/09/21/apprenticeship-goals.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
